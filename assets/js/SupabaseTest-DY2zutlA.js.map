{"version":3,"file":"SupabaseTest-DY2zutlA.js","sources":["../../../src/components/SupabaseTest.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Alert, Loader } from './ui';\nimport { AuthForm } from './auth';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useStands } from '../contexts/StandContext';\nimport { getStands, subscribeToStands, unsubscribe } from '../api/supabaseApi';\nimport supabase from '../supabaseClient';\n\nfunction SupabaseTest() {\n  const { user, isAuthenticated, loading: authLoading } = useAuth();\n  const { stands, loading: standsLoading } = useStands();\n  const [status, setStatus] = useState('Checking connection...');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [realtimeEnabled, setRealtimeEnabled] = useState(false);\n  const [realtimeStands, setRealtimeStands] = useState([]);\n\n  // Test Supabase connection\n  useEffect(() => {\n    async function testConnection() {\n      try {\n        // Check if we can connect to Supabase\n        const { data, error } = await supabase.from('stands').select('count');\n        \n        if (error) {\n          setStatus('Connection failed');\n          setError(error.message);\n        } else {\n          setStatus('Connected to Supabase');\n        }\n      } catch (err) {\n        setStatus('Connection error');\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    testConnection();\n  }, []);\n\n  // Set up real-time subscription when enabled\n  useEffect(() => {\n    if (!realtimeEnabled) return;\n\n    // Fetch initial data\n    const fetchStands = async () => {\n      try {\n        const { data, error } = await getStands();\n        \n        if (error) {\n          throw new Error(error.message);\n        }\n        \n        setRealtimeStands(data || []);\n      } catch (err) {\n        console.error('Error fetching stands:', err);\n      }\n    };\n    \n    fetchStands();\n    \n    // Set up real-time subscription\n    const subscription = subscribeToStands((payload) => {\n      console.log('Real-time stand update:', payload);\n      \n      if (payload.eventType === 'INSERT') {\n        setRealtimeStands(prev => [...prev, payload.new]);\n      } else if (payload.eventType === 'UPDATE') {\n        setRealtimeStands(prev => \n          prev.map(stand => stand.id === payload.new.id ? payload.new : stand)\n        );\n      } else if (payload.eventType === 'DELETE') {\n        setRealtimeStands(prev => \n          prev.filter(stand => stand.id !== payload.old.id)\n        );\n      }\n    });\n    \n    // Clean up subscription on unmount or when disabled\n    return () => {\n      unsubscribe(subscription);\n    };\n  }, [realtimeEnabled]);\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-display text-lemonade-blue-dark mb-6\">Supabase Integration Test</h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <div>\n          <div className=\"p-6 bg-white rounded-xl shadow-md mb-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Connection Status</h2>\n            \n            {loading ? (\n              <Loader size=\"md\" variant=\"yellow\" />\n            ) : (\n              <>\n                <p className={`font-medium ${status.includes('failed') || status.includes('error') ? 'text-red-500' : 'text-green-500'}`}>\n                  {status}\n                </p>\n                {error && (\n                  <Alert variant=\"error\" className=\"mt-2\">\n                    {error}\n                  </Alert>\n                )}\n              </>\n            )}\n          </div>\n          \n          <div className=\"p-6 bg-white rounded-xl shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">Authentication</h2>\n            <AuthForm />\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"p-6 bg-white rounded-xl shadow-md mb-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-semibold\">Stands from Context</h2>\n              {standsLoading && <Loader size=\"sm\" variant=\"yellow\" />}\n            </div>\n            \n            {stands.length > 0 ? (\n              <ul className=\"divide-y divide-gray-200\">\n                {stands.map(stand => (\n                  <li key={stand.id} className=\"py-3\">\n                    <h3 className=\"font-medium\">{stand.name}</h3>\n                    <p className=\"text-sm text-gray-600\">{stand.address}</p>\n                  </li>\n                ))}\n              </ul>\n            ) : !standsLoading ? (\n              <p className=\"text-gray-500\">No stands found</p>\n            ) : null}\n          </div>\n          \n          <div className=\"p-6 bg-white rounded-xl shadow-md\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-semibold\">Real-time Subscription</h2>\n              <button\n                className={`px-3 py-1 rounded text-sm ${\n                  realtimeEnabled \n                    ? 'bg-green-100 text-green-800 hover:bg-green-200' \n                    : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\n                }`}\n                onClick={() => setRealtimeEnabled(!realtimeEnabled)}\n              >\n                {realtimeEnabled ? 'Enabled' : 'Disabled'}\n              </button>\n            </div>\n            \n            {realtimeEnabled ? (\n              realtimeStands.length > 0 ? (\n                <ul className=\"divide-y divide-gray-200\">\n                  {realtimeStands.map(stand => (\n                    <li key={stand.id} className=\"py-3\">\n                      <h3 className=\"font-medium\">{stand.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{stand.address}</p>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p className=\"text-gray-500\">No stands found</p>\n              )\n            ) : (\n              <p className=\"text-gray-500\">\n                Click \"Disabled\" to enable real-time updates\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SupabaseTest;"],"names":["SupabaseTest","user","isAuthenticated","loading","authLoading","useAuth","stands","standsLoading","useStands","status","setStatus","useState","setLoading","error","setError","realtimeEnabled","setRealtimeEnabled","realtimeStands","setRealtimeStands","useEffect","async","data","supabase","from","select","message","err","testConnection","getStands","Error","fetchStands","subscription","subscribeToStands","payload","eventType","prev","new","map","stand","id","filter","old","unsubscribe","jsxs","className","children","jsx","Loader","size","variant","Fragment","includes","Alert","AuthForm","length","jsxRuntimeExports","name","address","onClick"],"mappings":"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"}