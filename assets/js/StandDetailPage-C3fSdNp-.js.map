{"version":3,"file":"StandDetailPage-C3fSdNp-.js","sources":["../../../src/components/stands/StandExpirationInfo.jsx","../../../src/components/stands/StandStatistics.jsx","../../../src/components/map/DraggableMarker.jsx","../../../src/pages/StandDetailPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { extendStandExpiration, reopenStand } from '../../api/supabaseApi';\nimport { Button, Alert } from '../ui';\n\n/**\n * Component to display and manage stand expiration\n * @param {Object} props - Component props\n * @param {Object} props.stand - Stand data including expiration_time\n * @param {Function} props.onExtend - Callback function when stand is extended\n * @returns {JSX.Element} - Stand expiration info component\n */\nconst StandExpirationInfo = ({ stand, onExtend }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const timerRef = useRef(null);\n  \n  // Calculate time remaining until expiration\n  const calculateTimeRemaining = () => {\n    if (!stand.expiration_time) return null;\n    \n    // If stand is inactive, return expired status\n    if (stand.is_active === false) {\n      return { expired: true, timeString: 'Inactive' };\n    }\n    \n    const now = new Date();\n    const expiration = new Date(stand.expiration_time);\n    \n    // Ensure we're using the same timezone for both dates\n    // by converting expiration time to local timezone\n    const localExpiration = new Date(\n      expiration.getTime() + (expiration.getTimezoneOffset() * 60000)\n    );\n    \n    const diffMs = localExpiration - now;\n    \n    // If already expired\n    if (diffMs <= 0) {\n      return { expired: true, timeString: 'Expired' };\n    }\n    \n    // Calculate hours and minutes remaining\n    const diffHrs = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n    const diffSecs = Math.floor((diffMs % (1000 * 60)) / 1000);\n    \n    let timeString = '';\n    if (diffHrs > 0) {\n      timeString += `${diffHrs} hour${diffHrs !== 1 ? 's' : ''}`;\n    }\n    if (diffMins > 0 || diffHrs === 0) {\n      if (diffHrs > 0) timeString += ' and ';\n      timeString += `${diffMins} minute${diffMins !== 1 ? 's' : ''}`;\n    }\n    if (diffHrs === 0 && diffMins === 0) {\n      timeString = `${diffSecs} second${diffSecs !== 1 ? 's' : ''}`;\n    }\n    \n    return { \n      expired: false, \n      timeString,\n      hours: diffHrs,\n      minutes: diffMins,\n      seconds: diffSecs,\n      critical: diffHrs === 0 && diffMins < 30 // Less than 30 minutes remaining\n    };\n  };\n  \n  // Update time remaining every second\n  useEffect(() => {\n    // Initial calculation\n    const initialTimeRemaining = calculateTimeRemaining();\n    setTimeRemaining(initialTimeRemaining);\n    \n    // Don't set up timer if stand is inactive or expired\n    if (stand.is_active === false || (initialTimeRemaining && initialTimeRemaining.expired)) {\n      return;\n    }\n    \n    // Set up timer to update every second\n    timerRef.current = setInterval(() => {\n      const newTimeRemaining = calculateTimeRemaining();\n      setTimeRemaining(newTimeRemaining);\n      \n      // If expired or no time remaining data, clear the interval\n      if ((newTimeRemaining && newTimeRemaining.expired) || !newTimeRemaining) {\n        clearInterval(timerRef.current);\n      }\n    }, 1000);\n    \n    // Clean up on unmount\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [stand.expiration_time, stand.is_active]);\n  \n  // Handle reopening an expired stand\n  const handleReopen = async () => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const { data, error } = await reopenStand(stand.id);\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      const now = new Date();\n      const midnight = new Date(now);\n      midnight.setHours(23, 59, 59, 999);\n      \n      const hoursUntilMidnight = Math.round((midnight - now) / (1000 * 60 * 60));\n      \n      setSuccess(`Stand reopened successfully! Active for the next ${hoursUntilMidnight} hours (until midnight).`);\n      \n      // Call the onExtend callback with the updated stand data\n      if (onExtend && data) {\n        onExtend(data);\n      }\n    } catch (err) {\n      console.error('Error reopening stand:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // If no expiration time is set\n  if (!stand.expiration_time) {\n    return (\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4\">\n        <p className=\"text-yellow-800 mb-2\">\n          This stand does not have an expiration time set.\n        </p>\n        <Button\n          variant=\"secondary\"\n          onClick={handleReopen}\n          disabled={loading}\n          size=\"sm\"\n        >\n          {loading ? 'Setting expiration...' : 'Activate until midnight'}\n        </Button>\n      </div>\n    );\n  }\n  \n  // Format the expiration date to show date and time\n  const formatExpirationDate = (dateString) => {\n    const date = new Date(dateString);\n    // Adjust for timezone to ensure consistent display\n    const localDate = new Date(\n      date.getTime() + (date.getTimezoneOffset() * 60000)\n    );\n    return localDate.toLocaleString(undefined, {\n      weekday: 'short',\n      month: 'short', \n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZoneName: 'short' // Show timezone to avoid confusion\n    });\n  };\n  \n  // Calculate if the stand expires today\n  const expiresLaterToday = () => {\n    if (!stand.expiration_time) return false;\n    \n    const now = new Date();\n    const expiration = new Date(stand.expiration_time);\n    \n    // Adjust for timezone to ensure consistent comparison\n    const localExpiration = new Date(\n      expiration.getTime() + (expiration.getTimezoneOffset() * 60000)\n    );\n    \n    return now.getDate() === localExpiration.getDate() && \n           now.getMonth() === localExpiration.getMonth() && \n           now.getFullYear() === localExpiration.getFullYear();\n  };\n  \n  // Handle the case where timeRemaining is null\n  const isExpired = timeRemaining?.expired || false;\n  const isCritical = timeRemaining?.critical || false;\n  \n  return (\n    <div className={`rounded-lg p-4 mb-4 ${\n      isExpired \n        ? 'bg-red-50 border border-red-200' \n        : isCritical\n          ? 'bg-orange-50 border border-orange-200'\n          : 'bg-blue-50 border border-blue-200'\n    }`}>\n      {error && (\n        <Alert \n          variant=\"error\" \n          className=\"mb-3\"\n          dismissible\n          onDismiss={() => setError(null)}\n        >\n          {error}\n        </Alert>\n      )}\n      \n      {success && (\n        <Alert \n          variant=\"success\" \n          className=\"mb-3\"\n          dismissible\n          onDismiss={() => setSuccess(null)}\n        >\n          {success}\n        </Alert>\n      )}\n      \n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center\">\n        <div>\n          <h3 className={`font-medium ${\n            isExpired \n              ? 'text-red-800' \n              : isCritical\n                ? 'text-orange-800'\n                : 'text-blue-800'\n          }`}>\n            Stand Visibility Status\n          </h3>\n          \n          {isExpired ? (\n            <p className=\"text-red-600\">\n              {stand.is_active === false \n                ? \"This stand is currently inactive and is not visible to the public.\"\n                : \"This stand has expired and is no longer visible to the public.\"}\n            </p>\n          ) : (\n            <>\n              <div className={`flex items-center ${\n                isCritical\n                  ? 'text-orange-600'\n                  : 'text-blue-600'\n              }`}>\n                <span className=\"text-lg font-semibold mr-2\">Countdown:</span>\n                <div className=\"bg-white rounded-lg px-3 py-2 shadow-sm border border-gray-200\">\n                  <span className=\"font-mono text-lg\">\n                    {timeRemaining ? timeRemaining.timeString : 'Calculating...'}\n                  </span>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-600 text-sm mt-2\">\n                {expiresLaterToday() \n                  ? `Expires tonight at midnight (${formatExpirationDate(stand.expiration_time)})` \n                  : `Expires at midnight: ${formatExpirationDate(stand.expiration_time)}`}\n              </p>\n            </>\n          )}\n        </div>\n        \n        <Button\n          variant={isExpired ? \"primary\" : \"secondary\"}\n          onClick={handleReopen}\n          disabled={loading}\n          className=\"mt-3 md:mt-0\"\n        >\n          {loading \n            ? 'Processing...' \n            : stand.is_active === false\n              ? 'Activate Stand'\n              : isExpired \n                ? 'Reopen Stand' \n                : expiresLaterToday()\n                  ? 'Active Until Tonight'\n                  : 'Active Until Midnight'\n          }\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default StandExpirationInfo;","import React from 'react';\nimport { Card } from '../ui';\n\n/**\n * Component to display stand visitor statistics\n * @param {Object} props - Component props\n * @param {Object} props.statistics - Statistics data\n * @returns {JSX.Element} - Stand statistics component\n */\nconst StandStatistics = ({ statistics }) => {\n  // If no statistics provided, use demo data\n  const stats = statistics || {\n    totalViews: Math.floor(Math.random() * 500),\n    uniqueVisitors: Math.floor(Math.random() * 200),\n    averageTimeSpent: Math.floor(Math.random() * 5) + 1,\n    popularTimes: [\n      { day: 'Monday', hour: '2-4 PM' },\n      { day: 'Wednesday', hour: '3-5 PM' },\n      { day: 'Saturday', hour: '12-2 PM' }\n    ],\n    viewsByDay: [\n      { day: 'Mon', views: Math.floor(Math.random() * 50) },\n      { day: 'Tue', views: Math.floor(Math.random() * 50) },\n      { day: 'Wed', views: Math.floor(Math.random() * 50) },\n      { day: 'Thu', views: Math.floor(Math.random() * 50) },\n      { day: 'Fri', views: Math.floor(Math.random() * 50) },\n      { day: 'Sat', views: Math.floor(Math.random() * 50) },\n      { day: 'Sun', views: Math.floor(Math.random() * 50) }\n    ]\n  };\n  \n  // Calculate max views for bar chart scaling\n  const maxViews = Math.max(...stats.viewsByDay.map(day => day.views));\n  \n  return (\n    <div>\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n          <h3 className=\"text-blue-800 text-lg mb-1\">Total Views</h3>\n          <p className=\"text-3xl font-bold text-blue-600\">{stats.totalViews}</p>\n        </div>\n        \n        <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n          <h3 className=\"text-green-800 text-lg mb-1\">Unique Visitors</h3>\n          <p className=\"text-3xl font-bold text-green-600\">{stats.uniqueVisitors}</p>\n        </div>\n        \n        <div className=\"bg-purple-50 rounded-lg p-4 text-center\">\n          <h3 className=\"text-purple-800 text-lg mb-1\">Avg. Time (min)</h3>\n          <p className=\"text-3xl font-bold text-purple-600\">{stats.averageTimeSpent}</p>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <Card.Header>\n            <h3 className=\"text-xl font-display text-lemonade-blue-dark\">\n              Views by Day\n            </h3>\n          </Card.Header>\n          <Card.Body className=\"p-4\">\n            <div className=\"h-64 flex items-end justify-between\">\n              {stats.viewsByDay.map((day, index) => (\n                <div key={index} className=\"flex flex-col items-center\">\n                  <div \n                    className=\"w-8 bg-lemonade-blue rounded-t-md\" \n                    style={{ \n                      height: `${(day.views / maxViews) * 100}%`,\n                      minHeight: '10px'\n                    }}\n                  ></div>\n                  <span className=\"mt-2 text-sm text-gray-600\">{day.day}</span>\n                </div>\n              ))}\n            </div>\n          </Card.Body>\n        </Card>\n        \n        <Card>\n          <Card.Header>\n            <h3 className=\"text-xl font-display text-lemonade-blue-dark\">\n              Popular Times\n            </h3>\n          </Card.Header>\n          <Card.Body>\n            <ul className=\"divide-y divide-gray-200\">\n              {stats.popularTimes.map((time, index) => (\n                <li key={index} className=\"py-3 flex justify-between\">\n                  <span className=\"font-medium\">{time.day}</span>\n                  <span className=\"text-gray-600\">{time.hour}</span>\n                </li>\n              ))}\n            </ul>\n          </Card.Body>\n        </Card>\n      </div>\n      \n      <div className=\"p-4 bg-yellow-50 rounded-lg\">\n        <p className=\"text-yellow-800 text-sm\">\n          Note: These statistics are for demonstration purposes only. In a production environment, \n          this would be connected to real analytics data.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default StandStatistics;","import React, { useRef, useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Marker, Popup, useMap } from 'react-leaflet';\nimport L from 'leaflet';\n\n/**\n * Custom draggable marker component for the map\n * Allows users to drag and drop a marker to set a location\n */\nconst DraggableMarker = ({ \n  position, \n  onPositionChange, \n  popupContent, \n  icon,\n  draggable = true\n}) => {\n  const markerRef = useRef(null);\n  const map = useMap();\n  const [markerPosition, setMarkerPosition] = useState(position);\n  \n  // Create a default icon if none is provided\n  const defaultIcon = useMemo(() => {\n    if (icon) return icon;\n    \n    // Create a custom draggable marker icon\n    return new L.Icon({\n      iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n      iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41]\n    });\n  }, [icon]);\n\n  // Update marker position when the position prop changes\n  useEffect(() => {\n    if (position && position[0] && position[1]) {\n      setMarkerPosition(position);\n      \n      // If this is the initial position (first render), center the map on it\n      if (markerRef.current === null) {\n        // This will run once when the marker is first created\n        map.flyTo(position, map.getZoom(), {\n          duration: 0.5\n        });\n      }\n    }\n  }, [position, map]);\n\n  // Handle marker drag events\n  const eventHandlers = {\n    dragend() {\n      const marker = markerRef.current;\n      if (marker) {\n        const newPosition = marker.getLatLng();\n        setMarkerPosition([newPosition.lat, newPosition.lng]);\n        if (onPositionChange) {\n          onPositionChange([newPosition.lat, newPosition.lng]);\n        }\n      }\n    },\n  };\n\n  // We've moved the initial centering logic to the position update effect above\n\n  return (\n    <Marker\n      draggable={draggable}\n      eventHandlers={eventHandlers}\n      position={markerPosition}\n      ref={markerRef}\n      icon={defaultIcon}\n    >\n      {popupContent && (\n        <Popup>\n          {popupContent}\n        </Popup>\n      )}\n    </Marker>\n  );\n};\n\nDraggableMarker.propTypes = {\n  position: PropTypes.arrayOf(PropTypes.number).isRequired,\n  onPositionChange: PropTypes.func,\n  popupContent: PropTypes.node,\n  icon: PropTypes.instanceOf(L.Icon),\n  draggable: PropTypes.bool\n};\n\nexport default DraggableMarker;","import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { \n  getStandById, \n  updateStand, \n  deleteStand, \n  uploadStandImage,\n  getProducts,\n  createProduct,\n  updateProduct,\n  deleteProduct,\n  uploadProductImage\n} from '../api/supabaseApi';\nimport { StandExpirationInfo, StandStatistics } from '../components/stands';\nimport { Button, Alert, Form, Tabs, Modal, Card, LoadingIndicator } from '../components/ui';\nimport Map from '../components/map/Map';\nimport DraggableMarker from '../components/map/DraggableMarker';\nimport logger from '../utils/logger';\n\n/**\n * Stand Detail Page component for managing a specific stand\n * @returns {JSX.Element} - Stand Detail Page component\n */\nconst StandDetailPage = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user } = useAuth();\n  \n  // Get stand data from location state if available\n  const standDataFromState = location.state?.standData;\n  \n  // State\n  const [stand, setStand] = useState(null);\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [activeTab, setActiveTab] = useState('details');\n  const [editMode, setEditMode] = useState(false);\n  const [showLocationMap, setShowLocationMap] = useState(false);\n  const [mapCenter, setMapCenter] = useState(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    address: '',\n    location_lat: '',\n    location_lng: '',\n    is_active: true\n  });\n  const [imageFile, setImageFile] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null);\n  const [uploadingImage, setUploadingImage] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleting, setDeleting] = useState(false);\n  const [visitorStats, setVisitorStats] = useState({\n    totalViews: Math.floor(Math.random() * 500), // Placeholder for demo\n    uniqueVisitors: Math.floor(Math.random() * 200), // Placeholder for demo\n    averageTimeSpent: Math.floor(Math.random() * 5) + 1, // Placeholder for demo\n    popularTimes: [\n      { day: 'Monday', hour: '2-4 PM' },\n      { day: 'Wednesday', hour: '3-5 PM' },\n      { day: 'Saturday', hour: '12-2 PM' }\n    ] // Placeholder for demo\n  });\n  \n  // Fetch stand data\n  useEffect(() => {\n    const fetchStandData = async () => {\n      try {\n        setLoading(true);\n        setError(null); // Clear any previous errors\n        logger.info('Fetching stand data', { standId: id });\n        \n        // Check if user is available\n        if (!user || !user.id) {\n          logger.error('Authentication error', new Error('User not available or missing ID'), { \n            standId: id, \n            userExists: !!user \n          });\n          throw new Error('Authentication error. Please try logging in again.');\n        }\n        \n        // Use stand data from state if available, otherwise fetch from API\n        let standData;\n        let standError;\n\n        if (standDataFromState && standDataFromState.id === id) {\n          logger.info('Using stand data from state', { standId: id });\n          standData = standDataFromState;\n        } else {\n          // Fetch stand details\n          logger.apiRequest(`stands/${id}`, 'GET');\n          const response = await getStandById(id);\n          standData = response.data;\n          standError = response.error;\n\n          if (standError) {\n            logger.apiError(`stands/${id}`, 'GET', standError);\n            throw new Error(`Failed to load stand: ${standError.message}`);\n          }\n        }\n        \n        if (!standData) {\n          logger.warn('Stand not found', { standId: id });\n          throw new Error('Stand not found. It may have been deleted.');\n        }\n        \n        // Ensure standData is properly formatted\n        let formattedStandData = { ...standData };\n        \n        if (typeof formattedStandData.location_lat === 'string') {\n          formattedStandData.location_lat = parseFloat(formattedStandData.location_lat) || 0;\n        }\n        \n        if (typeof formattedStandData.location_lng === 'string') {\n          formattedStandData.location_lng = parseFloat(formattedStandData.location_lng) || 0;\n        }\n        \n        logger.apiResponse(`stands/${id}`, 'GET', { standExists: !!formattedStandData }, 200);\n        \n        // Check if user is the owner\n        if (formattedStandData.owner_id !== user.id) {\n          logger.warn('Permission denied', { \n            standId: id, \n            standOwnerId: formattedStandData.owner_id, \n            userId: user.id \n          });\n          throw new Error('You do not have permission to view this stand');\n        }\n        \n        logger.info('Stand data loaded successfully', { \n          standId: id, \n          standName: formattedStandData.name,\n          isActive: formattedStandData.is_active\n        });\n        \n        setStand(formattedStandData);\n        setFormData({\n          name: formattedStandData.name || '',\n          description: formattedStandData.description || '',\n          address: formattedStandData.address || '',\n          location_lat: formattedStandData.location_lat || '',\n          location_lng: formattedStandData.location_lng || '',\n          is_active: formattedStandData.is_active\n        });\n        \n        // Fetch products\n        logger.apiRequest(`products?standId=${id}`, 'GET');\n        const { data: productsData, error: productsError } = await getProducts(id);\n        \n        if (productsError) {\n          logger.apiError(`products?standId=${id}`, 'GET', productsError);\n          // Don't throw here, just log the error and continue with empty products\n          logger.warn('Failed to load products, continuing with empty products list', { \n            error: productsError.message \n          });\n          setProducts([]);\n        } else {\n          logger.apiResponse(`products?standId=${id}`, 'GET', { \n            productCount: productsData?.length || 0 \n          }, 200);\n          \n          setProducts(productsData || []);\n        }\n      } catch (err) {\n        logger.error('Error fetching stand data', err, { standId: id });\n        setError(err.message || 'Something went wrong. Please try again.');\n        setStand(null); // Clear stand data on error\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    // Only fetch data if user is available\n    if (user) {\n      fetchStandData();\n    } else {\n      logger.info('Waiting for user data before fetching stand', { standId: id });\n    }\n  }, [id, user]);\n  \n  // Handle form input change\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  \n  // Handle image change\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setImageFile(file);\n      \n      // Create preview\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    logger.info('Submitting stand update form', { \n      standId: id, \n      hasImageUpdate: !!imageFile \n    });\n    \n    try {\n      // Validate form data\n      if (!formData.name.trim()) {\n        throw new Error('Stand name is required');\n      }\n      \n      // Update stand data\n      logger.apiRequest(`stands/${id}`, 'PUT', { \n        formData: { ...formData, name: formData.name.trim() } \n      });\n      \n      const { data, error } = await updateStand(id, {\n        ...formData,\n        name: formData.name.trim()\n      });\n      \n      if (error) {\n        logger.apiError(`stands/${id}`, 'PUT', error);\n        throw new Error(`Failed to update stand: ${error.message}`);\n      }\n      \n      logger.apiResponse(`stands/${id}`, 'PUT', { success: true }, 200);\n      \n      // Upload image if selected\n      if (imageFile) {\n        setUploadingImage(true);\n        logger.info('Uploading stand image', { \n          standId: id, \n          imageSize: imageFile.size,\n          imageType: imageFile.type\n        });\n        \n        logger.apiRequest(`stands/${id}/image`, 'POST');\n        const { error: uploadError } = await uploadStandImage(id, user.id, imageFile);\n        \n        if (uploadError) {\n          logger.apiError(`stands/${id}/image`, 'POST', uploadError);\n          throw new Error(`Error uploading image: ${uploadError.message}`);\n        }\n        \n        logger.apiResponse(`stands/${id}/image`, 'POST', { success: true }, 200);\n        \n        // Refresh stand data to get updated image URL\n        logger.apiRequest(`stands/${id}`, 'GET');\n        const { data: refreshedData, error: refreshError } = await getStandById(id);\n        \n        if (refreshError) {\n          logger.apiError(`stands/${id}`, 'GET', refreshError);\n          throw new Error(`Error refreshing stand data: ${refreshError.message}`);\n        }\n        \n        logger.apiResponse(`stands/${id}`, 'GET', { success: true }, 200);\n        setStand(refreshedData);\n      } else {\n        setStand(data[0]);\n      }\n      \n      logger.info('Stand updated successfully', { standId: id });\n      setSuccess('Stand updated successfully!');\n      setEditMode(false);\n      setImageFile(null);\n      setImagePreview(null);\n    } catch (err) {\n      logger.error('Error updating stand', err, { standId: id });\n      setError(err.message);\n    } finally {\n      setLoading(false);\n      setUploadingImage(false);\n    }\n  };\n  \n  // Handle stand deletion\n  const handleDelete = async () => {\n    setDeleting(true);\n    setError(null);\n    \n    logger.info('Deleting stand', { standId: id });\n    \n    try {\n      // Confirm user is the owner before deletion\n      if (!stand || stand.owner_id !== user.id) {\n        logger.warn('Unauthorized deletion attempt', { \n          standId: id, \n          userId: user.id,\n          standOwnerId: stand?.owner_id\n        });\n        throw new Error('You do not have permission to delete this stand');\n      }\n      \n      logger.apiRequest(`stands/${id}`, 'DELETE');\n      const { error } = await deleteStand(id);\n      \n      if (error) {\n        logger.apiError(`stands/${id}`, 'DELETE', error);\n        throw new Error(`Failed to delete stand: ${error.message}`);\n      }\n      \n      logger.apiResponse(`stands/${id}`, 'DELETE', { success: true }, 200);\n      logger.info('Stand deleted successfully', { standId: id });\n      \n      // Redirect to dashboard\n      navigate('/seller/dashboard', { \n        state: { message: 'Stand deleted successfully!' } \n      });\n    } catch (err) {\n      logger.error('Error deleting stand', err, { standId: id });\n      setError(err.message);\n      setShowDeleteModal(false);\n    } finally {\n      setDeleting(false);\n    }\n  };\n  \n  // Handle stand activation/deactivation\n  const handleToggleActive = async () => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    const newActiveState = !stand.is_active;\n    const action = newActiveState ? 'activate' : 'deactivate';\n    \n    logger.info(`Attempting to ${action} stand`, { \n      standId: id, \n      currentState: stand.is_active,\n      newState: newActiveState\n    });\n    \n    try {\n      logger.apiRequest(`stands/${id}`, 'PATCH', { is_active: newActiveState });\n      \n      const { data, error } = await updateStand(id, {\n        is_active: newActiveState\n      });\n      \n      if (error) {\n        logger.apiError(`stands/${id}`, 'PATCH', error);\n        throw new Error(`Failed to ${action} stand: ${error.message}`);\n      }\n      \n      logger.apiResponse(`stands/${id}`, 'PATCH', { success: true }, 200);\n      logger.info(`Stand ${action}d successfully`, { standId: id });\n      \n      setStand({\n        ...stand,\n        is_active: newActiveState\n      });\n      \n      setFormData(prev => ({\n        ...prev,\n        is_active: newActiveState\n      }));\n      \n      setSuccess(`Stand ${newActiveState ? 'activated' : 'deactivated'} successfully!`);\n    } catch (err) {\n      logger.error(`Error ${action}ing stand`, err, { standId: id });\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Handle stand expiration extension\n  const handleExtendExpiration = (updatedStand) => {\n    setStand(updatedStand);\n  };\n  \n  // Handle marker position change\n  const handleMarkerPositionChange = (newPosition) => {\n    setFormData(prev => ({\n      ...prev,\n      location_lat: newPosition[0],\n      location_lng: newPosition[1]\n    }));\n  };\n  \n  // Open location map modal\n  const openLocationMap = () => {\n    if (stand && stand.location_lat && stand.location_lng) {\n      setMapCenter([stand.location_lat, stand.location_lng]);\n    } else if (formData.location_lat && formData.location_lng) {\n      setMapCenter([parseFloat(formData.location_lat), parseFloat(formData.location_lng)]);\n    } else {\n      // Default to a central US location if no coordinates are available\n      setMapCenter([39.8283, -98.5795]);\n    }\n    setShowLocationMap(true);\n  };\n  \n  if (loading && !stand) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col justify-center items-center h-64\">\n          <LoadingIndicator \n            size=\"lg\" \n            variant=\"blue\" \n            message=\"Loading stand details...\" \n          />\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"bg-white rounded-xl shadow-md p-6 mb-4\">\n          <h2 className=\"text-2xl font-display text-lemonade-blue-dark mb-4\">\n            Error Loading Stand\n          </h2>\n          <Alert \n            variant=\"error\" \n            className=\"mb-6\"\n            dismissible\n            onDismiss={() => setError(null)}\n          >\n            {error}\n          </Alert>\n          <p className=\"text-gray-600 mb-6\">\n            There was a problem loading the stand details. This could be due to:\n          </p>\n          <ul className=\"list-disc list-inside text-gray-600 mb-6\">\n            <li>The stand may have been deleted</li>\n            <li>You may not have permission to view this stand</li>\n            <li>There might be a temporary server issue</li>\n            <li>Your session may have expired</li>\n          </ul>\n          <div className=\"flex space-x-3\">\n            <Link to=\"/seller/dashboard\">\n              <Button variant=\"primary\">\n                Back to Dashboard\n              </Button>\n            </Link>\n            <Button \n              variant=\"secondary\"\n              onClick={() => window.location.reload()}\n            >\n              Try Again\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-6 flex flex-col md:flex-row justify-between items-start md:items-center\">\n        <div>\n          <Link to=\"/seller/dashboard\" className=\"text-lemonade-blue hover:underline mb-2 inline-block\">\n            ← Back to Dashboard\n          </Link>\n          <h1 className=\"text-3xl font-display text-lemonade-blue-dark\">\n            {stand.name}\n          </h1>\n        </div>\n        \n        <div className=\"flex space-x-2 mt-4 md:mt-0\">\n          <Button\n            variant={stand.is_active ? \"danger-outline\" : \"success\"}\n            onClick={handleToggleActive}\n            disabled={loading}\n          >\n            {stand.is_active ? 'Deactivate' : 'Activate'} Stand\n          </Button>\n          \n          <Button\n            variant=\"danger\"\n            onClick={() => setShowDeleteModal(true)}\n          >\n            Delete Stand\n          </Button>\n        </div>\n      </div>\n      \n      {error && (\n        <Alert \n          variant=\"error\" \n          className=\"mb-4\"\n          dismissible\n          onDismiss={() => setError(null)}\n        >\n          {error}\n        </Alert>\n      )}\n      \n      {success && (\n        <Alert \n          variant=\"success\" \n          className=\"mb-4\"\n          dismissible\n          onDismiss={() => setSuccess(null)}\n        >\n          {success}\n        </Alert>\n      )}\n      \n      {/* Stand expiration info */}\n      <StandExpirationInfo \n        stand={stand} \n        onExtend={handleExtendExpiration} \n      />\n      \n      {/* Tabs */}\n      <Tabs\n        activeTab={activeTab}\n        onChange={setActiveTab}\n        tabs={[\n          { id: 'details', label: 'Stand Details' },\n          { id: 'products', label: 'Products' },\n          { id: 'statistics', label: 'Visitor Statistics' }\n        ]}\n        className=\"mb-6\"\n      />\n      \n      {/* Stand Details Tab */}\n      {activeTab === 'details' && (\n        <div className=\"bg-white rounded-xl shadow-md p-6\">\n          {!editMode ? (\n            <>\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-display text-lemonade-blue-dark\">\n                  Stand Details\n                </h2>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => setEditMode(true)}\n                >\n                  Edit Details\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"md:col-span-1\">\n                  <div className=\"rounded-lg overflow-hidden border border-gray-200\">\n                    {stand.image_url ? (\n                      <img \n                        src={stand.image_url} \n                        alt={stand.name} \n                        className=\"w-full h-64 object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-64 bg-lemonade-yellow-light flex items-center justify-center\">\n                        <span className=\"text-lemonade-yellow-dark\">No Image</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"md:col-span-2\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h3 className=\"text-gray-500 text-sm\">Name</h3>\n                      <p className=\"text-gray-800 font-medium\">{stand.name}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-gray-500 text-sm\">Status</h3>\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        stand.is_active \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {stand.is_active ? 'Active' : 'Inactive'}\n                      </span>\n                    </div>\n                    \n                    <div className=\"md:col-span-2\">\n                      <h3 className=\"text-gray-500 text-sm\">Description</h3>\n                      <p className=\"text-gray-800\">\n                        {stand.description || 'No description provided.'}\n                      </p>\n                    </div>\n                    \n                    <div className=\"md:col-span-2\">\n                      <h3 className=\"text-gray-500 text-sm\">Address</h3>\n                      <p className=\"text-gray-800\">\n                        {stand.address || 'No address provided.'}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-gray-500 text-sm\">Latitude</h3>\n                      <p className=\"text-gray-800 font-mono\">\n                        {stand.location_lat || 'N/A'}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-gray-500 text-sm\">Longitude</h3>\n                      <p className=\"text-gray-800 font-mono\">\n                        {stand.location_lng || 'N/A'}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-gray-500 text-sm\">Created</h3>\n                      <p className=\"text-gray-800\">\n                        {new Date(stand.created_at).toLocaleDateString()}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-gray-500 text-sm\">Last Updated</h3>\n                      <p className=\"text-gray-800\">\n                        {new Date(stand.updated_at).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-display text-lemonade-blue-dark\">\n                  Edit Stand Details\n                </h2>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setEditMode(false);\n                    setImageFile(null);\n                    setImagePreview(null);\n                    // Reset form data to current stand data\n                    setFormData({\n                      name: stand.name || '',\n                      description: stand.description || '',\n                      address: stand.address || '',\n                      location_lat: stand.location_lat || '',\n                      location_lng: stand.location_lng || '',\n                      is_active: stand.is_active\n                    });\n                  }}\n                >\n                  Cancel\n                </Button>\n              </div>\n              \n              <Form onSubmit={handleSubmit}>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"md:col-span-1\">\n                    <div className=\"rounded-lg overflow-hidden border border-gray-200 mb-4\">\n                      {imagePreview ? (\n                        <img \n                          src={imagePreview} \n                          alt=\"Preview\" \n                          className=\"w-full h-64 object-cover\"\n                        />\n                      ) : stand.image_url ? (\n                        <img \n                          src={stand.image_url} \n                          alt={stand.name} \n                          className=\"w-full h-64 object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-64 bg-lemonade-yellow-light flex items-center justify-center\">\n                          <span className=\"text-lemonade-yellow-dark\">No Image</span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <Form.Group>\n                      <Form.Label htmlFor=\"image\">Stand Image</Form.Label>\n                      <Form.Input\n                        id=\"image\"\n                        name=\"image\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageChange}\n                      />\n                      <Form.Text>\n                        Upload an image of your lemonade stand.\n                      </Form.Text>\n                    </Form.Group>\n                    \n                    <Form.Group>\n                      <div className=\"flex items-center\">\n                        <Form.Checkbox\n                          id=\"is_active\"\n                          name=\"is_active\"\n                          checked={formData.is_active}\n                          onChange={handleInputChange}\n                        />\n                        <Form.Label htmlFor=\"is_active\" className=\"ml-2 mb-0\">\n                          Stand is active\n                        </Form.Label>\n                      </div>\n                      <Form.Text>\n                        Inactive stands are not visible to the public.\n                      </Form.Text>\n                    </Form.Group>\n                  </div>\n                  \n                  <div className=\"md:col-span-2\">\n                    <Form.Group>\n                      <Form.Label htmlFor=\"name\" required>\n                        Stand Name\n                      </Form.Label>\n                      <Form.Input\n                        id=\"name\"\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter stand name\"\n                        required\n                      />\n                    </Form.Group>\n                    \n                    <Form.Group>\n                      <Form.Label htmlFor=\"description\">\n                        Description\n                      </Form.Label>\n                      <Form.Textarea\n                        id=\"description\"\n                        name=\"description\"\n                        value={formData.description}\n                        onChange={handleInputChange}\n                        placeholder=\"Describe your lemonade stand\"\n                        rows={4}\n                      />\n                    </Form.Group>\n                    \n                    <Form.Group>\n                      <Form.Label htmlFor=\"address\">\n                        Address\n                      </Form.Label>\n                      <Form.Input\n                        id=\"address\"\n                        name=\"address\"\n                        value={formData.address}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter stand address\"\n                      />\n                    </Form.Group>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <Form.Group>\n                        <Form.Label htmlFor=\"location_lat\">\n                          Latitude\n                        </Form.Label>\n                        <Form.Input\n                          id=\"location_lat\"\n                          name=\"location_lat\"\n                          type=\"number\"\n                          step=\"any\"\n                          value={formData.location_lat}\n                          onChange={handleInputChange}\n                          placeholder=\"Enter latitude\"\n                        />\n                      </Form.Group>\n                      \n                      <Form.Group>\n                        <Form.Label htmlFor=\"location_lng\">\n                          Longitude\n                        </Form.Label>\n                        <Form.Input\n                          id=\"location_lng\"\n                          name=\"location_lng\"\n                          type=\"number\"\n                          step=\"any\"\n                          value={formData.location_lng}\n                          onChange={handleInputChange}\n                          placeholder=\"Enter longitude\"\n                        />\n                      </Form.Group>\n                    </div>\n                    \n                    <div className=\"mt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"secondary\"\n                        onClick={openLocationMap}\n                        className=\"w-full flex items-center justify-center\"\n                      >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n                        </svg>\n                        Set Location on Map (Drag & Drop)\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end mt-6\">\n                  <Button\n                    type=\"submit\"\n                    variant=\"primary\"\n                    disabled={loading || uploadingImage}\n                  >\n                    {loading || uploadingImage ? 'Saving...' : 'Save Changes'}\n                  </Button>\n                </div>\n              </Form>\n            </>\n          )}\n        </div>\n      )}\n      \n      {/* Products Tab */}\n      {activeTab === 'products' && (\n        <div className=\"bg-white rounded-xl shadow-md p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-display text-lemonade-blue-dark\">\n              Products\n            </h2>\n            <Link to={`/seller/stands/${id}/products/new`}>\n              <Button variant=\"primary\">\n                Add New Product\n              </Button>\n            </Link>\n          </div>\n          \n          {products.length === 0 ? (\n            <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\n              <p className=\"text-gray-600 mb-4\">You don't have any products for this stand yet.</p>\n              <Link to={`/seller/stands/${id}/products/new`}>\n                <Button variant=\"primary\">\n                  Add Your First Product\n                </Button>\n              </Link>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {products.map((product) => (\n                <Card key={product.id} className=\"hover:shadow-md transition\">\n                  <div className=\"h-48 bg-gray-100\">\n                    {product.image_url ? (\n                      <img \n                        src={product.image_url} \n                        alt={product.name} \n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full bg-lemonade-yellow-light flex items-center justify-center\">\n                        <span className=\"text-lemonade-yellow-dark\">No Image</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <Card.Body>\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h3 className=\"text-xl font-display text-lemonade-blue-dark\">\n                        {product.name}\n                      </h3>\n                      <span className=\"text-lg font-semibold text-lemonade-blue\">\n                        ${product.price.toFixed(2)}\n                      </span>\n                    </div>\n                    \n                    <p className=\"text-gray-600 mb-3 line-clamp-2\">\n                      {product.description || 'No description'}\n                    </p>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        product.is_available \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {product.is_available ? 'Available' : 'Unavailable'}\n                      </span>\n                      \n                      <Link \n                        to={`/seller/stands/${id}/products/${product.id}`}\n                        className=\"text-lemonade-blue hover:underline\"\n                      >\n                        Edit →\n                      </Link>\n                    </div>\n                  </Card.Body>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Statistics Tab */}\n      {activeTab === 'statistics' && (\n        <div className=\"bg-white rounded-xl shadow-md p-6\">\n          <h2 className=\"text-2xl font-display text-lemonade-blue-dark mb-6\">\n            Visitor Statistics\n          </h2>\n          \n          <StandStatistics statistics={visitorStats} />\n        </div>\n      )}\n      \n      {/* Delete Confirmation Modal */}\n      <Modal\n        isOpen={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        title=\"Delete Stand\"\n      >\n        <div className=\"p-6\">\n          <p className=\"text-gray-700 mb-6\">\n            Are you sure you want to delete this stand? This action cannot be undone.\n          </p>\n          \n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setShowDeleteModal(false)}\n              disabled={deleting}\n            >\n              Cancel\n            </Button>\n            \n            <Button\n              variant=\"danger\"\n              onClick={handleDelete}\n              disabled={deleting}\n            >\n              {deleting ? 'Deleting...' : 'Delete Stand'}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      \n      {/* Location Map Modal */}\n      {showLocationMap && (\n        <Modal\n          isOpen={showLocationMap}\n          onClose={() => setShowLocationMap(false)}\n          title=\"Adjust Stand Location\"\n          size=\"lg\"\n        >\n          <div className=\"p-6\">\n            <p className=\"mb-4 text-gray-700\">\n              Drag the marker to set your stand's exact location. Click \"Save Location\" when you're done.\n            </p>\n            \n            <div className=\"h-96 mb-4 rounded-lg overflow-hidden\">\n              {mapCenter && (\n                <Map\n                  center={mapCenter}\n                  zoom={15}\n                  height=\"100%\"\n                  showUserLocation={true}\n                >\n                  {/* We're using a custom component here that will be rendered inside the Map */}\n                  <DraggableMarker\n                    position={mapCenter}\n                    onPositionChange={handleMarkerPositionChange}\n                    popupContent={\n                      <div>\n                        <h3 className=\"font-display text-base\">Your Stand Location</h3>\n                        <p className=\"text-sm\">Drag me to adjust!</p>\n                      </div>\n                    }\n                  />\n                </Map>\n              )}\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Latitude</label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  value={formData.location_lat}\n                  onChange={(e) => setFormData(prev => ({ ...prev, location_lat: e.target.value }))}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Longitude</label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  value={formData.location_lng}\n                  onChange={(e) => setFormData(prev => ({ ...prev, location_lng: e.target.value }))}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                variant=\"secondary\"\n                onClick={() => setShowLocationMap(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  // Actually save the location by keeping the form data\n                  // The form data is already updated by handleMarkerPositionChange\n                  setShowLocationMap(false);\n                }}\n              >\n                Save Location\n              </Button>\n            </div>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default StandDetailPage;"],"names":["StandExpirationInfo","stand","onExtend","loading","setLoading","useState","error","setError","success","setSuccess","timeRemaining","setTimeRemaining","timerRef","useRef","calculateTimeRemaining","expiration_time","is_active","expired","timeString","now","Date","expiration","diffMs","getTime","getTimezoneOffset","diffHrs","Math","floor","diffMins","diffSecs","hours","minutes","seconds","critical","useEffect","initialTimeRemaining","current","setInterval","newTimeRemaining","clearInterval","handleReopen","async","data","reopenStand","id","Error","message","midnight","setHours","hoursUntilMidnight","round","err","jsxs","className","children","jsx","jsxRuntimeExports","Button","variant","onClick","disabled","size","formatExpirationDate","dateString","date","toLocaleString","weekday","month","day","hour","minute","timeZoneName","expiresLaterToday","localExpiration","getDate","getMonth","getFullYear","isExpired","isCritical","Alert","dismissible","onDismiss","Fragment","StandStatistics","statistics","stats","totalViews","random","uniqueVisitors","averageTimeSpent","popularTimes","viewsByDay","views","maxViews","max","map","Card","Header","Body","index","style","height","minHeight","time","DraggableMarker","position","onPositionChange","popupContent","icon","draggable","markerRef","useMap","markerPosition","setMarkerPosition","defaultIcon","useMemo","L","Icon","iconUrl","iconRetinaUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","flyTo","getZoom","duration","eventHandlers","dragend","marker","newPosition","getLatLng","lat","lng","Marker","ref","Popup","propTypes","PropTypes","arrayOf","number","isRequired","func","node","instanceOf","bool","StandDetailPage","useParams","navigate","useNavigate","location","useLocation","user","useAuth","standDataFromState","_a","state","standData","setStand","products","setProducts","activeTab","setActiveTab","editMode","setEditMode","showLocationMap","setShowLocationMap","mapCenter","setMapCenter","formData","setFormData","name","description","address","location_lat","location_lng","imageFile","setImageFile","imagePreview","setImagePreview","uploadingImage","setUploadingImage","showDeleteModal","setShowDeleteModal","deleting","setDeleting","visitorStats","setVisitorStats","logger","info","standId","userExists","standError","apiRequest","response","getStandById","apiError","warn","formattedStandData","parseFloat","apiResponse","standExists","owner_id","standOwnerId","userId","standName","isActive","productsData","productsError","getProducts","productCount","length","fetchStandData","handleInputChange","e","value","type","checked","target","prev","LoadingIndicator","Link","to","window","reload","newActiveState","action","currentState","newState","updateStand","updatedStand","Tabs","onChange","tabs","label","Form","onSubmit","preventDefault","hasImageUpdate","trim","imageSize","imageType","uploadError","uploadStandImage","refreshedData","refreshError","src","alt","image_url","Group","Label","htmlFor","Input","accept","file","files","reader","FileReader","onloadend","result","readAsDataURL","Text","Checkbox","required","placeholder","Textarea","rows","step","xmlns","viewBox","fill","fillRule","d","clipRule","created_at","toLocaleDateString","updated_at","product","price","toFixed","is_available","Modal","isOpen","onClose","title","deleteStand","Map","center","zoom","showUserLocation"],"mappings":"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"}