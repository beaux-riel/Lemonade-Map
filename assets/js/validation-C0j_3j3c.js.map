{"version":3,"file":"validation-C0j_3j3c.js","sources":["../../../src/utils/validation.js"],"sourcesContent":["/**\n * Utility functions for form validation\n */\n\n/**\n * Validate profile form data\n * \n * @param {Object} formData - The profile form data to validate\n * @returns {Object} - Object with errors for each field\n */\nexport const validateProfileForm = (formData) => {\n  const errors = {};\n\n  // Validate full name\n  if (!formData.full_name) {\n    errors.full_name = 'Full name is required';\n  } else if (formData.full_name.length < 2) {\n    errors.full_name = 'Full name must be at least 2 characters';\n  } else if (formData.full_name.length > 50) {\n    errors.full_name = 'Full name must be less than 50 characters';\n  }\n\n  // Validate phone (optional)\n  if (formData.phone && !/^[+]?[(]?[0-9]{3}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{4,6}$/im.test(formData.phone)) {\n    errors.phone = 'Please enter a valid phone number';\n  }\n\n  // Validate bio (optional)\n  if (formData.bio && formData.bio.length > 500) {\n    errors.bio = 'Bio must be less than 500 characters';\n  }\n\n  return errors;\n};\n\n/**\n * Validate address form data\n * \n * @param {Object} addressData - The address form data to validate\n * @returns {Object} - Object with errors for each field\n */\nexport const validateAddressForm = (addressData) => {\n  const errors = {};\n\n  // All fields are optional, but if provided, they should be valid\n  \n  // Validate street\n  if (addressData.street && addressData.street.length < 5) {\n    errors.street = 'Please enter a valid street address';\n  }\n\n  // Validate city\n  if (addressData.city && addressData.city.length < 2) {\n    errors.city = 'Please enter a valid city';\n  }\n\n  // Validate state\n  if (addressData.state && addressData.state.length < 2) {\n    errors.state = 'Please select a valid state';\n  }\n\n  // Validate postal code\n  if (addressData.postalCode) {\n    // US postal code validation\n    if (addressData.country === 'United States' && !/^\\d{5}(-\\d{4})?$/.test(addressData.postalCode)) {\n      errors.postalCode = 'Please enter a valid US ZIP code';\n    }\n    // Canadian postal code validation\n    else if (addressData.country === 'Canada' && !/^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/.test(addressData.postalCode)) {\n      errors.postalCode = 'Please enter a valid Canadian postal code';\n    }\n    // Generic validation for other countries\n    else if (addressData.postalCode.length < 3 || addressData.postalCode.length > 10) {\n      errors.postalCode = 'Please enter a valid postal code';\n    }\n  }\n\n  // If useForSearch is true, require all address fields\n  if (addressData.useForSearch) {\n    if (!addressData.street) {\n      errors.street = 'Street is required when using as search location';\n    }\n    if (!addressData.city) {\n      errors.city = 'City is required when using as search location';\n    }\n    if (!addressData.state) {\n      errors.state = 'State is required when using as search location';\n    }\n    if (!addressData.postalCode) {\n      errors.postalCode = 'Postal code is required when using as search location';\n    }\n  }\n\n  return errors;\n};\n\n/**\n * Validate seller form data\n * \n * @param {Object} formData - The form data to validate\n * @returns {Object} - Object with errors for each field\n */\nexport const validateSellerForm = (formData) => {\n  const errors = {};\n\n  // Validate seller name\n  if (!formData.name) {\n    errors.name = 'Name is required';\n  } else if (formData.name.length < 2) {\n    errors.name = 'Name must be at least 2 characters';\n  } else if (formData.name.length > 50) {\n    errors.name = 'Name must be less than 50 characters';\n  }\n\n  // Validate seller address\n  if (!formData.address) {\n    errors.address = 'Address is required';\n  } else if (formData.address.length < 5) {\n    errors.address = 'Please enter a valid address';\n  }\n\n  // Validate coordinates\n  if (!formData.location_lat || !formData.location_lng) {\n    errors.location = 'Location coordinates are required. Please use the geocode button.';\n  }\n\n  // Validate products\n  if (!formData.products || formData.products.length === 0) {\n    errors.products = 'At least one product is required';\n  } else {\n    const productErrors = formData.products.map(validateProduct);\n    if (productErrors.some(error => Object.keys(error).length > 0)) {\n      errors.products = productErrors;\n    }\n  }\n\n  return errors;\n};\n\n/**\n * Validate product data\n * \n * @param {Object} product - The product data to validate\n * @returns {Object} - Object with errors for each field\n */\nexport const validateProduct = (product) => {\n  const errors = {};\n\n  // Validate product name\n  if (!product.name) {\n    errors.name = 'Product name is required';\n  } else if (product.name.length < 2) {\n    errors.name = 'Product name must be at least 2 characters';\n  } else if (product.name.length > 50) {\n    errors.name = 'Product name must be less than 50 characters';\n  }\n\n  // Validate product description\n  if (!product.description) {\n    errors.description = 'Product description is required';\n  } else if (product.description.length < 10) {\n    errors.description = 'Description must be at least 10 characters';\n  } else if (product.description.length > 500) {\n    errors.description = 'Description must be less than 500 characters';\n  }\n\n  // Validate product price\n  if (!product.price) {\n    errors.price = 'Price is required';\n  } else if (isNaN(parseFloat(product.price))) {\n    errors.price = 'Price must be a number';\n  } else if (parseFloat(product.price) <= 0) {\n    errors.price = 'Price must be greater than 0';\n  } else if (parseFloat(product.price) > 100) {\n    errors.price = 'Price must be less than $100';\n  }\n\n  return errors;\n};\n\n/**\n * Check if the form has any errors\n * \n * @param {Object} errors - The errors object\n * @returns {boolean} - True if there are errors, false otherwise\n */\nexport const hasErrors = (errors) => {\n  if (!errors) return false;\n  \n  // Check for top-level errors\n  const topLevelErrors = Object.keys(errors).filter(key => key !== 'products');\n  if (topLevelErrors.length > 0) return true;\n  \n  // Check for product errors\n  if (errors.products && Array.isArray(errors.products)) {\n    return errors.products.some(productError => Object.keys(productError).length > 0);\n  }\n  \n  return false;\n};"],"names":["validateProfileForm","formData","errors","full_name","length","phone","test","bio","validateAddressForm","addressData","street","city","state","postalCode","country","useForSearch","validateSellerForm","name","address","location_lat","location_lng","location","products","productErrors","map","validateProduct","some","error","Object","keys","product","description","price","isNaN","parseFloat","hasErrors","filter","key","Array","isArray","productError"],"mappings":"AAUY,MAACA,EAAuBC,IAClC,MAAMC,EAAS,CAAE,EAqBV,OAlBFD,EAASE,UAEHF,EAASE,UAAUC,OAAS,EACrCF,EAAOC,UAAY,0CACVF,EAASE,UAAUC,OAAS,KACrCF,EAAOC,UAAY,6CAJnBD,EAAOC,UAAY,wBAQjBF,EAASI,QAAU,2DAA2DC,KAAKL,EAASI,SAC9FH,EAAOG,MAAQ,qCAIbJ,EAASM,KAAON,EAASM,IAAIH,OAAS,MACxCF,EAAOK,IAAM,wCAGRL,CAAA,EASIM,EAAuBC,IAClC,MAAMP,EAAS,CAAE,EAmDV,OA9CHO,EAAYC,QAAUD,EAAYC,OAAON,OAAS,IACpDF,EAAOQ,OAAS,uCAIdD,EAAYE,MAAQF,EAAYE,KAAKP,OAAS,IAChDF,EAAOS,KAAO,6BAIZF,EAAYG,OAASH,EAAYG,MAAMR,OAAS,IAClDF,EAAOU,MAAQ,+BAIbH,EAAYI,aAEc,kBAAxBJ,EAAYK,SAAgC,mBAAmBR,KAAKG,EAAYI,YAInD,WAAxBJ,EAAYK,SAAyB,wCAAwCR,KAAKG,EAAYI,aAI9FJ,EAAYI,WAAWT,OAAS,GAAKK,EAAYI,WAAWT,OAAS,MAC5EF,EAAOW,WAAa,oCAJpBX,EAAOW,WAAa,4CAJpBX,EAAOW,WAAa,oCAapBJ,EAAYM,eACTN,EAAYC,SACfR,EAAOQ,OAAS,oDAEbD,EAAYE,OACfT,EAAOS,KAAO,kDAEXF,EAAYG,QACfV,EAAOU,MAAQ,mDAEZH,EAAYI,aACfX,EAAOW,WAAa,0DAIjBX,CAAA,EASIc,EAAsBf,IACjC,MAAMC,EAAS,CAAE,EAwBjB,GArBKD,EAASgB,KAEHhB,EAASgB,KAAKb,OAAS,EAChCF,EAAOe,KAAO,qCACLhB,EAASgB,KAAKb,OAAS,KAChCF,EAAOe,KAAO,wCAJdf,EAAOe,KAAO,mBAQXhB,EAASiB,QAEHjB,EAASiB,QAAQd,OAAS,IACnCF,EAAOgB,QAAU,gCAFjBhB,EAAOgB,QAAU,sBAMdjB,EAASkB,cAAiBlB,EAASmB,eACtClB,EAAOmB,SAAW,qEAIfpB,EAASqB,UAAyC,IAA7BrB,EAASqB,SAASlB,OAErC,CACL,MAAMmB,EAAgBtB,EAASqB,SAASE,IAAIC,GACxCF,EAAcG,MAAcC,GAAAC,OAAOC,KAAKF,GAAOvB,OAAS,MAC1DF,EAAOoB,SAAWC,EAExB,MANIrB,EAAOoB,SAAW,mCAQb,OAAApB,CAAA,EASIuB,EAAmBK,IAC9B,MAAM5B,EAAS,CAAE,EA+BV,OA5BF4B,EAAQb,KAEFa,EAAQb,KAAKb,OAAS,EAC/BF,EAAOe,KAAO,6CACLa,EAAQb,KAAKb,OAAS,KAC/BF,EAAOe,KAAO,gDAJdf,EAAOe,KAAO,2BAQXa,EAAQC,YAEFD,EAAQC,YAAY3B,OAAS,GACtCF,EAAO6B,YAAc,6CACZD,EAAQC,YAAY3B,OAAS,MACtCF,EAAO6B,YAAc,gDAJrB7B,EAAO6B,YAAc,kCAQlBD,EAAQE,MAEFC,MAAMC,WAAWJ,EAAQE,QAClC9B,EAAO8B,MAAQ,yBACNE,WAAWJ,EAAQE,QAAU,EACtC9B,EAAO8B,MAAQ,+BACNE,WAAWJ,EAAQE,OAAS,MACrC9B,EAAO8B,MAAQ,gCANf9B,EAAO8B,MAAQ,oBASV9B,CAAA,EASIiC,EAAajC,IACpB,IAACA,EAAe,OAAA,EAIhB,OADmB0B,OAAOC,KAAK3B,GAAQkC,QAAOC,GAAe,aAARA,IACtCjC,OAAS,MAGxBF,EAAOoB,WAAYgB,MAAMC,QAAQrC,EAAOoB,YACnCpB,EAAOoB,SAASI,MAAKc,GAAgBZ,OAAOC,KAAKW,GAAcpC,OAAS,GAG1E"}