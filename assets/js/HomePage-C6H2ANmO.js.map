{"version":3,"mappings":"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","names":["PropTypes","bool","func","string","StandCard","stand","onViewProducts","onClose","className","props","jsxRuntimeExports","jsxs","Card","variant","hover","children","Header","jsx","name","address","Badge","distance","getProximityDescription","Body","image_url","optimizedImageUrl","imageUrl","width","includes","replace","startsWith","getResponsiveImageUrl","window","innerWidth","placeholderUrl","text","bgColor","textColor","btoa","createPlaceholderImage","src","alt","loading","decoding","fetchpriority","sizes","onError","e","target","onerror","description","fill","viewBox","fillRule","d","clipRule","formatDistance","Footer","Button","onClick","size","propTypes","shape","id","isRequired","number","arrayOf","location_lat","location_lng","StandListSidebar","lazy","__vitePreload","Promise","resolve","then","StandListSidebar$1","__VITE_PRELOAD__","NearbyStandsList","import","MapPage","mapHeight","stands","standsLoading","error","standsError","useStands","location","getLocation","locationError","useGeolocation","nearbyStands","useNearbyStands","initializing","authInitializing","useAuth","selectedStand","setSelectedStand","useState","mapCenter","setMapCenter","mapZoom","setMapZoom","activeTab","setActiveTab","setError","useEffect","handleStandClick","displayedStands","useMemo","mapComponent","Fragment","Map","center","zoom","height","showUserLocation","onStandClick","onUserLocationFound","latlng","isSignificantChange","Math","abs","lat","lng","Loader","showLabel","label","SidebarLoadingFallback","memoizedStands","sidebarComponent","Suspense","fallback","onStandSelect","onStandClose","userLocation","Alert","dismissible","onDismiss","ResponsiveMapLayout","ProductCard","product","parseFloat","price","toFixed","is_available","oneOfType","filteredStands","setFilteredStands","maxDistance","setMaxDistance","searchTerm","setSearchTerm","showFilters","setShowFilters","products","setProducts","loadingProducts","setLoadingProducts","productError","setProductError","result","filterStandsByDistance","trim","term","toLowerCase","filter","timer","setTimeout","sampleProducts","clearTimeout","handleResetFilters","length","map","prev","Form","Group","Label","htmlFor","Input","placeholder","value","onChange","Select","disabled","options","object","featureItems","HomePage","isAuthenticated","Link","to","item"],"ignoreList":[],"sources":["../../../src/components/map/MapControls.jsx","../../../src/utils/imageOptimization.jsx","../../../src/components/map/StandCard.jsx","../../../src/components/map/MapView.jsx","../../../src/components/map/MapPage.tsx","../../../src/components/map/ProductCard.jsx","../../../src/components/map/StandListSidebar.jsx","../../../src/pages/HomePage.tsx","../../../../../../../../../images/markers/lemonade-map-logo.png"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '../ui';\n\n/**\n * MapControls component for controlling map features\n */\nconst MapControls = ({\n  showUserLocation,\n  onToggleUserLocation,\n  onCenterUserLocation,\n  onRefreshStands,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div \n      className={`flex flex-wrap gap-2 ${className}`}\n      {...props}\n    >\n      <Button\n        size=\"sm\"\n        variant={showUserLocation ? 'primary' : 'outline'}\n        onClick={onToggleUserLocation}\n      >\n        {showUserLocation ? 'Hide My Location' : 'Show My Location'}\n      </Button>\n      \n      <Button\n        size=\"sm\"\n        variant=\"secondary\"\n        onClick={onCenterUserLocation}\n        disabled={!showUserLocation}\n      >\n        Center on Me\n      </Button>\n      \n      <Button\n        size=\"sm\"\n        variant=\"accent\"\n        onClick={onRefreshStands}\n      >\n        Refresh Stands\n      </Button>\n    </div>\n  );\n};\n\nMapControls.propTypes = {\n  showUserLocation: PropTypes.bool,\n  onToggleUserLocation: PropTypes.func,\n  onCenterUserLocation: PropTypes.func,\n  onRefreshStands: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default MapControls;","/**\n * Utility functions for image optimization\n */\n\n/**\n * Generates a responsive image URL based on screen size\n * @param {string} imageUrl - Original image URL\n * @param {number} width - Requested width\n * @returns {string} - Optimized image URL\n */\nexport const getResponsiveImageUrl = (imageUrl, width = 400) => {\n  if (!imageUrl) return '';\n  \n  // If the image is already from an image service that supports resizing\n  if (imageUrl.includes('cloudinary.com')) {\n    // Example: Cloudinary transformation\n    return imageUrl.replace('/upload/', `/upload/w_${width},q_auto,f_auto/`);\n  }\n  \n  // If the image is from our own server, we can use a simple query parameter\n  if (imageUrl.startsWith('/')) {\n    return `${imageUrl}?width=${width}`;\n  }\n  \n  // For other images, return the original URL\n  return imageUrl;\n};\n\n/**\n * Determines if an image should be lazy loaded based on its position\n * @param {number} index - Index of the image in a list\n * @param {number} threshold - Number of images to eagerly load\n * @returns {string} - 'lazy' or 'eager'\n */\nexport const getLazyLoadingStrategy = (index, threshold = 3) => {\n  return index < threshold ? 'eager' : 'lazy';\n};\n\n/**\n * Creates a placeholder image URL for when images fail to load\n * @param {string} text - Text to display on the placeholder\n * @param {string} bgColor - Background color\n * @param {string} textColor - Text color\n * @returns {string} - Data URL for a placeholder image\n */\nexport const createPlaceholderImage = (\n  text = 'Image not available',\n  bgColor = 'F8E8A2',\n  textColor = '333333'\n) => {\n  // Create a simple SVG placeholder\n  const svg = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"200\" viewBox=\"0 0 300 200\">\n      <rect width=\"300\" height=\"200\" fill=\"#${bgColor}\"/>\n      <text x=\"50%\" y=\"50%\" font-family=\"Arial, sans-serif\" font-size=\"16\" text-anchor=\"middle\" fill=\"#${textColor}\">${text}</text>\n    </svg>\n  `;\n  \n  // Convert to base64 data URL\n  return `data:image/svg+xml;base64,${btoa(svg)}`;\n};\n\n/**\n * Preloads critical images\n * @param {Array<string>} imageUrls - Array of image URLs to preload\n */\nexport const preloadCriticalImages = (imageUrls = []) => {\n  if (!imageUrls.length) return;\n  \n  imageUrls.forEach(url => {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = 'image';\n    link.href = url;\n    document.head.appendChild(link);\n  });\n};","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Badge } from '../ui';\nimport { formatDistance, getProximityDescription } from '../../services/geolocationService';\nimport { getResponsiveImageUrl, createPlaceholderImage } from '../../utils/imageOptimization';\n\n/**\n * StandCard component for displaying lemonade stand information\n */\nconst StandCard = ({\n  stand,\n  onViewProducts,\n  onClose,\n  className = '',\n  ...props\n}) => {\n  if (!stand) return null;\n  \n  return (\n    <Card\n      className={`w-full ${className}`}\n      variant=\"yellow\"\n      hover={false}\n      {...props}\n    >\n      <Card.Header className=\"flex justify-between items-start\">\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-lg md:text-xl font-display text-lemonade-yellow-dark truncate\">{stand.name}</h3>\n          <p className=\"text-xs md:text-sm text-gray-600 truncate\">{stand.address}</p>\n        </div>\n        <div className=\"flex flex-col items-end gap-1 md:gap-2 ml-2\">\n          <Badge variant=\"yellow\" className=\"text-xs md:text-sm\">Open</Badge>\n          {stand.distance !== null && stand.distance !== undefined && (\n            <Badge variant=\"blue\" className=\"text-xs md:text-sm\">{getProximityDescription(stand.distance)}</Badge>\n          )}\n        </div>\n      </Card.Header>\n      \n      <Card.Body>\n        {stand.image_url && (\n          <div className=\"relative w-full h-32 md:h-48 mb-4\">\n            {useMemo(() => {\n              // Get responsive image URL based on device width\n              const optimizedImageUrl = getResponsiveImageUrl(\n                stand.image_url, \n                window.innerWidth < 768 ? 320 : 480\n              );\n              \n              // Create placeholder for fallback\n              const placeholderUrl = createPlaceholderImage(stand.name);\n              \n              return (\n                <img \n                  src={optimizedImageUrl} \n                  alt={stand.name}\n                  className=\"w-full h-full object-cover rounded-lg\"\n                  loading=\"lazy\"\n                  decoding=\"async\"\n                  fetchpriority=\"low\"\n                  sizes=\"(max-width: 768px) 320px, 480px\"\n                  onError={(e) => {\n                    // Fallback for image loading errors\n                    e.target.onerror = null;\n                    e.target.src = placeholderUrl;\n                  }}\n                />\n              );\n            }, [stand.image_url, stand.name])}\n          </div>\n        )}\n        \n        <p className=\"text-sm md:text-base text-gray-700\">{stand.description}</p>\n        \n        <div className=\"mt-3 md:mt-4 flex items-center text-xs md:text-sm text-gray-600\">\n          <svg className=\"w-4 h-4 mr-1 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n          </svg>\n          <span>\n            {stand.distance !== null && stand.distance !== undefined \n              ? formatDistance(stand.distance, 'miles')\n              : 'Distance unknown'}\n          </span>\n        </div>\n      </Card.Body>\n      \n      <Card.Footer className=\"flex flex-col sm:flex-row sm:justify-between gap-2\">\n        <Button\n          variant=\"outline\"\n          onClick={onClose}\n          size=\"sm\"\n          className=\"w-full sm:w-auto text-sm\"\n        >\n          Back to Map\n        </Button>\n        \n        {onViewProducts && (\n          <Button\n            variant=\"primary\"\n            onClick={() => onViewProducts(stand)}\n            size=\"sm\"\n            className=\"w-full sm:w-auto text-sm\"\n          >\n            View Products\n          </Button>\n        )}\n      </Card.Footer>\n    </Card>\n  );\n};\n\nStandCard.propTypes = {\n  stand: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    address: PropTypes.string,\n    image_url: PropTypes.string,\n    distance: PropTypes.number,\n  }),\n  onViewProducts: PropTypes.func,\n  onClose: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default StandCard;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Map from './Map';\nimport MapControls from './MapControls';\nimport StandCard from './StandCard';\nimport { Card, Loader } from '../ui';\nimport './Map.css'; // Ensure CSS is imported\n\n/**\n * MapView component that combines Map, MapControls, and StandCard\n */\nconst MapView = ({\n  stands = [],\n  loading = false,\n  onRefreshStands,\n  onViewProducts,\n  className = '',\n  ...props\n}) => {\n  const [showUserLocation, setShowUserLocation] = useState(true);\n  const [selectedStand, setSelectedStand] = useState(null);\n  const [mapCenter, setMapCenter] = useState(null);\n  const [mapZoom, setMapZoom] = useState(13);\n  const [userPosition, setUserPosition] = useState(null);\n  \n  // Get user's location on initial load\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // Check if running on iOS\n      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) || \n                    (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n      \n      const options = {\n        enableHighAccuracy: isIOS, // Higher accuracy on iOS\n        timeout: isIOS ? 15000 : 10000, // Longer timeout for iOS\n        maximumAge: 30000\n      };\n      \n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserPosition([latitude, longitude]);\n          \n          // If no stands are selected, center map on user's location\n          if (!selectedStand) {\n            setMapCenter([latitude, longitude]);\n          }\n        },\n        (error) => {\n          console.error('Error getting user location:', error);\n          // Default to a central location if geolocation fails\n          if (!mapCenter && stands.length > 0) {\n            // Use the first stand's location as default\n            setMapCenter([stands[0].location_lat, stands[0].location_lng]);\n          } else if (!mapCenter) {\n            // Default to New York City if no stands\n            setMapCenter([40.7128, -74.0060]);\n          }\n        },\n        options\n      );\n    }\n  }, []);\n  \n  // Handle toggling user location\n  const handleToggleUserLocation = () => {\n    setShowUserLocation(!showUserLocation);\n  };\n  \n  // Handle centering on user location\n  const handleCenterUserLocation = () => {\n    if (userPosition) {\n      setMapCenter(userPosition);\n      setMapZoom(16);\n    }\n  };\n  \n  // Handle stand click\n  const handleStandClick = (stand) => {\n    setSelectedStand(stand);\n    setMapCenter([stand.location_lat, stand.location_lng]);\n    setMapZoom(16);\n  };\n  \n  // Handle closing stand card\n  const handleCloseStandCard = () => {\n    setSelectedStand(null);\n  };\n  \n  // Calculate default map center if not set\n  const defaultCenter = mapCenter || \n    (stands.length > 0 ? [stands[0].location_lat, stands[0].location_lng] : [40.7128, -74.0060]);\n  \n  return (\n    <div className={`${className}`} {...props}>\n      <div className=\"mb-4\">\n        <MapControls\n          showUserLocation={showUserLocation}\n          onToggleUserLocation={handleToggleUserLocation}\n          onCenterUserLocation={handleCenterUserLocation}\n          onRefreshStands={onRefreshStands}\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n        <div className=\"lg:col-span-2\">\n          {loading ? (\n            <Card className=\"flex items-center justify-center\" style={{ height: '500px' }}>\n              <Loader size=\"lg\" variant=\"yellow\" showLabel label=\"Loading map...\" />\n            </Card>\n          ) : (\n            <Map\n              stands={stands}\n              center={defaultCenter}\n              zoom={mapZoom}\n              height=\"500px\"\n              showUserLocation={showUserLocation}\n              onStandClick={handleStandClick}\n            />\n          )}\n        </div>\n        \n        <div>\n          {selectedStand ? (\n            <StandCard\n              stand={selectedStand}\n              onViewProducts={onViewProducts}\n              onClose={handleCloseStandCard}\n            />\n          ) : (\n            <Card>\n              <Card.Header>\n                <h3 className=\"text-xl font-display\">Lemonade Stands</h3>\n              </Card.Header>\n              <Card.Body>\n                <p>\n                  {stands.length > 0\n                    ? `Found ${stands.length} lemonade stands near you. Click on a marker to see details.`\n                    : 'No lemonade stands found. Try refreshing or changing your location.'}\n                </p>\n              </Card.Body>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMapView.propTypes = {\n  stands: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      location_lat: PropTypes.number.isRequired,\n      location_lng: PropTypes.number.isRequired,\n      address: PropTypes.string,\n      image_url: PropTypes.string,\n    })\n  ),\n  loading: PropTypes.bool,\n  onRefreshStands: PropTypes.func,\n  onViewProducts: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default MapView;","// src/components/MapPage.tsx\nimport React, { useState, useEffect, useMemo, lazy, Suspense } from \"react\";\nimport Map from \"./Map\";\nimport { Alert, Loader, Button } from \"../ui\";\nimport { ResponsiveMapLayout } from \"../layout\";\nimport { useGeolocation } from \"../../contexts/GeolocationContext\";\nimport { useStands } from \"../../contexts/StandContext\";\nimport { useNearbyStands } from \"../../contexts/NearbyStandsContext\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\n// Lazy load components that aren't needed immediately\nconst StandListSidebar = lazy(() => import(\"./StandListSidebar\"));\nconst NearbyStandsList = lazy(() => import(\"./NearbyStandsList\"));\n\ninterface MapPageProps {\n  /**\n   * Height for the Map container. Accepts any valid CSS height value.\n   * Defaults to full-page layout if not provided.\n   */\n  mapHeight?: string;\n}\n\nconst MapPage: React.FC<MapPageProps> = ({\n  mapHeight = \"calc(100vh - 200px)\",\n}) => {\n  const { stands, loading: standsLoading, error: standsError } = useStands();\n  const { location, getLocation, error: locationError } = useGeolocation();\n  const { nearbyStands } = useNearbyStands();\n  const { initializing: authInitializing } = useAuth();\n\n  const [selectedStand, setSelectedStand] = useState<any>(null);\n  const [mapCenter, setMapCenter] = useState<[number, number]>([\n    40.7128, -74.006,\n  ]);\n  const [mapZoom, setMapZoom] = useState<number>(13);\n  const [activeTab, setActiveTab] = useState<\"all\" | \"nearby\">(\"all\");\n  const [error, setError] = useState<string | null>(null);\n\n  // Determine if we're in a loading state\n  const loading = standsLoading || authInitializing;\n\n  // Sync context errors\n  useEffect(() => {\n    if (standsError) setError(standsError);\n    else if (locationError && activeTab === \"nearby\") setError(locationError);\n    else setError(null);\n  }, [standsError, locationError, activeTab]);\n\n  // Handle stand click\n  const handleStandClick = (stand: any) => {\n    setSelectedStand(stand);\n    setMapCenter([stand.location_lat, stand.location_lng]);\n    setMapZoom(16);\n  };\n\n  // Close stand details\n  const handleCloseStand = () => {\n    setSelectedStand(null);\n    if (location) setMapCenter([location.lat, location.lng]);\n    else setMapCenter([40.7128, -74.006]);\n    setMapZoom(13);\n  };\n\n  // Center map on user location if changed significantly\n  const handleUserLocationFound = (latlng: { lat: number; lng: number }) => {\n    if (!latlng) return;\n    \n    // Only update map center if:\n    // 1. This is the first location update (initial centering)\n    // 2. The user has explicitly requested to center on their location\n    // 3. The location has changed significantly (more than ~100 meters)\n    const isSignificantChange = \n      Math.abs(mapCenter[0] - latlng.lat) > 0.001 || \n      Math.abs(mapCenter[1] - latlng.lng) > 0.001;\n      \n    // Use a ref to track if this is the first location update\n    const isFirstLocationUpdate = !location;\n    \n    if (isFirstLocationUpdate || isSignificantChange) {\n      setMapCenter([latlng.lat, latlng.lng]);\n    }\n  };\n\n  // Determine which stands to show\n  const displayedStands = useMemo(\n    () => (activeTab === \"nearby\" ? nearbyStands : stands),\n    [activeTab, nearbyStands, stands]\n  );\n\n  // Map rendering block\n  const mapComponent = (\n    <>\n      <Map\n        stands={displayedStands}\n        center={mapCenter}\n        zoom={mapZoom}\n        height={mapHeight}\n        showUserLocation\n        onStandClick={handleStandClick}\n        onUserLocationFound={handleUserLocationFound}\n        className={loading ? \"opacity-60\" : \"\"}\n      />\n      {loading && (\n        <div className=\"flex justify-center mt-4\">\n          <Loader\n            size=\"lg\"\n            variant=\"yellow\"\n            showLabel\n            label=\"Loading lemonade stands...\"\n          />\n        </div>\n      )}\n    </>\n  );\n\n  // Sidebar loading fallback\n  const SidebarLoadingFallback = () => (\n    <div className=\"flex items-center justify-center h-full\">\n      <Loader size=\"md\" variant=\"yellow\" showLabel label=\"Loading...\" />\n    </div>\n  );\n\n  // Memoize stands list\n  const memoizedStands = useMemo(() => stands, [stands]);\n\n  // Sidebar with tabs\n  const sidebarComponent = (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex mb-4\">\n        <Button\n          variant={activeTab === \"all\" ? \"primary\" : \"outline\"}\n          className=\"flex-1 rounded-r-none\"\n          onClick={() => setActiveTab(\"all\")}\n        >\n          All Stands\n        </Button>\n        <Button\n          variant={activeTab === \"nearby\" ? \"primary\" : \"outline\"}\n          className=\"flex-1 rounded-l-none\"\n          onClick={() => {\n            setActiveTab(\"nearby\");\n            if (!location) getLocation();\n          }}\n        >\n          Near You\n        </Button>\n      </div>\n      <div className=\"flex-grow\">\n        <Suspense fallback={<SidebarLoadingFallback />}>\n          {activeTab === \"all\" ? (\n            <StandListSidebar\n              stands={memoizedStands}\n              loading={loading}\n              selectedStand={selectedStand}\n              onStandSelect={handleStandClick}\n              onStandClose={handleCloseStand}\n              userLocation={location}\n              className=\"h-full\"\n            />\n          ) : (\n            <NearbyStandsList\n              onStandSelect={handleStandClick}\n              className=\"h-full\"\n            />\n          )}\n        </Suspense>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"w-full h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"mb-4 flex-shrink-0\">\n        <h1 className=\"text-3xl font-display text-lemonade-blue-dark mb-2\">\n          Discover Lemonade Stands Near You\n        </h1>\n        <p className=\"text-gray-600\">\n          Browse the map to discover refreshing lemonade stands in your area\n        </p>\n      </div>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert\n          variant=\"error\"\n          className=\"mb-4 flex-shrink-0\"\n          dismissible\n          onDismiss={() => setError(null)}\n        >\n          {error}\n        </Alert>\n      )}\n\n      {/* Map & Sidebar Layout */}\n      <div className=\"flex-1 flex\">\n        <ResponsiveMapLayout\n          mapComponent={<div className=\"h-full w-full\">{mapComponent}</div>}\n          sidebarComponent={<div className=\"h-full\">{sidebarComponent}</div>}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MapPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Badge } from '../ui';\n\n/**\n * ProductCard component for displaying product information\n */\nconst ProductCard = ({ product, className = '', ...props }) => {\n  if (!product) return null;\n\n  return (\n    <Card\n      className={`w-full ${className}`}\n      variant=\"white\"\n      hover={false}\n      {...props}\n    >\n      <div className=\"flex flex-col sm:flex-row\">\n        {product.image_url && (\n          <div className=\"sm:w-1/3 flex-shrink-0\">\n            <img\n              src={product.image_url}\n              alt={product.name}\n              className=\"w-full h-28 sm:h-32 md:h-full object-cover rounded-t-lg sm:rounded-l-lg sm:rounded-t-none\"\n            />\n          </div>\n        )}\n\n        <div className={`p-3 sm:p-4 flex-1 ${!product.image_url ? 'sm:w-full' : 'sm:w-2/3'}`}>\n          <div className=\"flex justify-between items-start mb-1 sm:mb-2\">\n            <h3 className=\"text-base sm:text-lg font-display text-lemonade-blue-dark truncate max-w-[70%]\">{product.name}</h3>\n            <Badge variant=\"yellow\" className=\"ml-2 text-xs sm:text-sm whitespace-nowrap\">${parseFloat(product.price).toFixed(2)}</Badge>\n          </div>\n\n          {product.description && (\n            <p className=\"text-gray-700 text-xs sm:text-sm line-clamp-3\">{product.description}</p>\n          )}\n\n          <div className=\"flex justify-start items-center mt-2\">\n            {product.is_available === false ? (\n              <Badge variant=\"red\" className=\"text-xs\">Sold Out</Badge>\n            ) : (\n              <Badge variant=\"green\" className=\"text-xs\">Available</Badge>\n            )}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nProductCard.propTypes = {\n  product: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    price: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    image_url: PropTypes.string,\n    is_available: PropTypes.bool\n  }).isRequired,\n  className: PropTypes.string\n};\n\nexport default ProductCard;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Form, Alert, Loader } from '../ui';\nimport ProductCard from './ProductCard';\nimport StandCard from './StandCard';\nimport { filterStandsByDistance } from '../../utils/distance';\nimport { formatDistance, getProximityDescription } from '../../services/geolocationService';\n\n/**\n * StandListSidebar component for displaying and filtering lemonade stands\n */\nconst StandListSidebar = ({\n  stands = [],\n  loading = false,\n  selectedStand = null,\n  onStandSelect,\n  onStandClose,\n  userLocation = null,\n  className = '',\n  ...props\n}) => {\n  const [filteredStands, setFilteredStands] = useState(stands);\n  const [maxDistance, setMaxDistance] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [products, setProducts] = useState([]);\n  const [loadingProducts, setLoadingProducts] = useState(false);\n  const [productError, setProductError] = useState(null);\n\n  // Update filtered stands when stands, maxDistance, or searchTerm changes\n  useEffect(() => {\n    let result = [...stands];\n\n    // Filter by distance if maxDistance is set and user location is available\n    if (maxDistance !== null && userLocation) {\n      result = filterStandsByDistance(result, maxDistance);\n    }\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      const term = searchTerm.toLowerCase();\n      result = result.filter(\n        stand =>\n          stand.name.toLowerCase().includes(term) ||\n          (stand.description && stand.description.toLowerCase().includes(term)) ||\n          (stand.address && stand.address.toLowerCase().includes(term))\n      );\n    }\n\n    setFilteredStands(result);\n  }, [stands, maxDistance, searchTerm, userLocation]);\n\n  // Simulate fetching products when a stand is selected\n  useEffect(() => {\n    if (selectedStand) {\n      setLoadingProducts(true);\n      setProductError(null);\n      \n      // Simulate API call delay\n      const timer = setTimeout(() => {\n        // In a real app, this would be an API call to fetch products\n        // For now, we'll use sample data\n        const sampleProducts = [\n          {\n            id: `${selectedStand.id}-1`,\n            name: 'Classic Lemonade',\n            description: 'Our signature lemonade made with fresh lemons and organic sugar.',\n            price: 2.99,\n            image_url: 'https://images.unsplash.com/photo-1621263764928-df1444c5e859?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',\n            is_available: true\n          },\n          {\n            id: `${selectedStand.id}-2`,\n            name: 'Strawberry Lemonade',\n            description: 'Classic lemonade infused with fresh strawberries.',\n            price: 3.49,\n            image_url: 'https://images.unsplash.com/photo-1497534446932-c925b458314e?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',\n            is_available: true\n          },\n          {\n            id: `${selectedStand.id}-3`,\n            name: 'Blueberry Mint Lemonade',\n            description: 'A refreshing blend of lemonade with blueberries and fresh mint.',\n            price: 3.99,\n            image_url: 'https://images.unsplash.com/photo-1556881286-fc6915169721?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',\n            is_available: false\n          }\n        ];\n        \n        setProducts(sampleProducts);\n        setLoadingProducts(false);\n      }, 1000);\n      \n      return () => clearTimeout(timer);\n    } else {\n      setProducts([]);\n    }\n  }, [selectedStand]);\n\n  // Handle distance filter change\n  const handleDistanceChange = (e) => {\n    const value = e.target.value;\n    setMaxDistance(value === '' ? null : parseFloat(value));\n  };\n\n  // Handle search term change\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  // Reset filters\n  const handleResetFilters = () => {\n    setMaxDistance(null);\n    setSearchTerm('');\n  };\n\n  // Toggle filters visibility\n  const toggleFilters = () => {\n    setShowFilters(prev => !prev);\n  };\n\n  return (\n    <div className={`flex flex-col h-full ${className}`} {...props}>\n      {selectedStand ? (\n        <div className=\"flex flex-col h-full\">\n          <StandCard\n            stand={selectedStand}\n            onClose={onStandClose}\n            className=\"mb-4\"\n          />\n          \n          <Card className=\"flex-grow overflow-auto\">\n            <Card.Header>\n              <h3 className=\"text-xl font-display text-lemonade-blue-dark\">Products</h3>\n            </Card.Header>\n            \n            <Card.Body>\n              {loadingProducts ? (\n                <div className=\"flex justify-center py-8\">\n                  <Loader variant=\"yellow\" />\n                </div>\n              ) : productError ? (\n                <Alert variant=\"error\">\n                  {productError}\n                </Alert>\n              ) : products.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {products.map(product => (\n                    <ProductCard\n                      key={product.id}\n                      product={product}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center py-4 text-gray-500\">\n                  No products available for this stand.\n                </p>\n              )}\n            </Card.Body>\n          </Card>\n        </div>\n      ) : (\n        <Card className=\"h-full flex flex-col\">\n          <Card.Header>\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-display text-lemonade-blue-dark\">Lemonade Stands</h2>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={toggleFilters}\n              >\n                {showFilters ? 'Hide Filters' : 'Show Filters'}\n              </Button>\n            </div>\n          </Card.Header>\n          \n          {showFilters && (\n            <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\n              <Form.Group>\n                <Form.Label htmlFor=\"search\">Search</Form.Label>\n                <Form.Input\n                  id=\"search\"\n                  placeholder=\"Search by name or address\"\n                  value={searchTerm}\n                  onChange={handleSearchChange}\n                />\n              </Form.Group>\n              \n              <Form.Group>\n                <Form.Label htmlFor=\"distance\">Maximum Distance ({userLocation ? 'miles' : 'unavailable'})</Form.Label>\n                <Form.Select\n                  id=\"distance\"\n                  value={maxDistance || ''}\n                  onChange={handleDistanceChange}\n                  disabled={!userLocation}\n                  options={[\n                    { value: '', label: 'Any distance' },\n                    { value: '1', label: '1 mile' },\n                    { value: '5', label: '5 miles' },\n                    { value: '10', label: '10 miles' },\n                    { value: '25', label: '25 miles' },\n                    { value: '50', label: '50 miles' }\n                  ]}\n                />\n                {!userLocation && (\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Enable location services to filter by distance\n                  </p>\n                )}\n              </Form.Group>\n              \n              <div className=\"flex justify-end mt-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleResetFilters}\n                >\n                  Reset Filters\n                </Button>\n              </div>\n            </div>\n          )}\n          \n          <Card.Body className=\"flex-grow overflow-auto\">\n            {loading ? (\n              <div className=\"flex justify-center py-8\">\n                <Loader variant=\"yellow\" />\n              </div>\n            ) : filteredStands.length > 0 ? (\n              <div className=\"space-y-4\">\n                {filteredStands.map(stand => (\n                  <div \n                    key={stand.id} \n                    className=\"p-3 bg-lemonade-yellow-light rounded-lg cursor-pointer hover:bg-lemonade-yellow-dark transition-colors\"\n                    onClick={() => onStandSelect(stand)}\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <h3 className=\"font-display text-lg\">{stand.name}</h3>\n                      {stand.distance !== null && stand.distance !== undefined && (\n                        <span className=\"text-xs bg-white px-2 py-1 rounded-full\">\n                          {formatDistance(stand.distance, 'miles')}\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-700 line-clamp-2\">{stand.description}</p>\n                    <div className=\"flex justify-between items-center mt-1\">\n                      <p className=\"text-xs text-gray-600\">{stand.address}</p>\n                      {stand.distance !== null && stand.distance !== undefined && (\n                        <span className=\"text-xs font-medium text-lemonade-blue-dark\">\n                          {getProximityDescription(stand.distance)}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No lemonade stands found.</p>\n                {(maxDistance !== null || searchTerm) && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleResetFilters}\n                    className=\"mt-2\"\n                  >\n                    Clear Filters\n                  </Button>\n                )}\n              </div>\n            )}\n          </Card.Body>\n          \n          <Card.Footer>\n            <p className=\"text-sm text-gray-600\">\n              {filteredStands.length} {filteredStands.length === 1 ? 'stand' : 'stands'} found\n              {maxDistance !== null && userLocation && ` within ${maxDistance} miles`}\n            </p>\n          </Card.Footer>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nStandListSidebar.propTypes = {\n  stands: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      address: PropTypes.string,\n      location_lat: PropTypes.number,\n      location_lng: PropTypes.number,\n      image_url: PropTypes.string,\n      distance: PropTypes.number\n    })\n  ),\n  loading: PropTypes.bool,\n  selectedStand: PropTypes.object,\n  onStandSelect: PropTypes.func.isRequired,\n  onStandClose: PropTypes.func.isRequired,\n  userLocation: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired\n  }),\n  className: PropTypes.string\n};\n\nexport default StandListSidebar;","import React from \"react\";\nimport { MapPage } from \"../components/map\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Link } from \"react-router-dom\";\nimport LemonadeMapLogo from \"/images/markers/lemonade-map-logo.png\";\nimport { LoadingIndicator } from \"../components/ui\";\n\nconst featureItems = [\n  \"Easily find young entrepreneurs near you\",\n  \"Real-time updates and locations\",\n  \"Community reviews and ratings\",\n  \"Support children learning business skills\",\n  \"Turn everyday walks into fun adventures\",\n];\n\nconst HomePage: React.FC = () => {\n  const { isAuthenticated, initializing } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-yellow-50 to-white\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Hero Section */}\n        <div className=\"mb-8 bg-white rounded-xl shadow-lg overflow-hidden\">\n          <div className=\"flex flex-col md:flex-row\">\n            <div className=\"md:w-1/2 p-6 md:p-8\">\n              <h1 className=\"text-4xl md:text-5xl font-display font-bold text-lemonade-blue-dark mb-4\">\n                Welcome to Lemonade Map!\n              </h1>\n              <p className=\"text-lg text-gray-700 mb-6\">\n                Discover and support young entrepreneurs in your neighborhood.\n                From refreshing lemonade stands to creative crafts, we're\n                putting kids' first businesses on the map!\n              </p>\n\n              <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n                <Link\n                  to={isAuthenticated ? \"/seller/dashboard\" : \"/login\"}\n                  className=\"bg-lemonade-yellow hover:bg-yellow-400 text-lemonade-blue-dark font-bold py-3 px-6 rounded-lg text-center transition-colors duration-200\"\n                >\n                  Add Your Stand\n                </Link>\n                <Link\n                  to=\"/about\"\n                  className=\"bg-lemonade-blue-dark hover:bg-lemonade-blue text-white font-bold py-3 px-6 rounded-lg text-center transition-colors duration-200\"\n                >\n                  Learn More\n                </Link>\n              </div>\n            </div>\n\n            {/* Why Lemonade Map? */}\n            <div className=\"md:w-1/2 bg-yellow-100 p-6 flex items-center justify-center\">\n              <div\n                className=\"bg-white rounded-lg p-5 shadow-md w-full\n                              flex flex-col md:flex-row items-start\"\n              >\n                {/* Text */}\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-semibold text-lemonade-blue-dark mb-4 flex items-center\">\n                    <span className=\"text-yellow-500 text-3xl mr-2\">★</span>\n                    Why Lemonade Map?\n                  </h2>\n                  <ul className=\"space-y-3\">\n                    {featureItems.map((item) => (\n                      <li key={item} className=\"flex items-start\">\n                        <span className=\"text-yellow-500 text-lg mr-2\">•</span>\n                        <span className=\"text-gray-700\">{item}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                {/* Logo */}\n                <div className=\"mt-6 md:mt-0 md:ml-6 flex-shrink-0 mx-auto\">\n                  <img\n                    src={LemonadeMapLogo}\n                    alt=\"Lemonade Map Logo\"\n                    className=\"w-64 h-64 object-contain mx-auto\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Featured Stands Section - TODO */}\n        {/*\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-2xl font-display font-bold text-lemonade-blue-dark\">\n              Featured Stands Near You\n            </h2>\n            <Link\n              to=\"/stands\"\n              className=\"text-lemonade-blue hover:text-lemonade-blue-dark font-medium\"\n            >\n              View All →\n            </Link>\n          </div>\n          \n          {initializing ? (\n            <div className=\"flex justify-center py-8\">\n              <LoadingIndicator \n                size=\"md\" \n                variant=\"yellow\" \n                message=\"Loading featured stands...\" \n              />\n            </div>\n          ) : isAuthenticated ? (\n            <div className=\"flex overflow-x-auto pb-4 gap-4 hide-scrollbar\">\n              // placeholder cards\n              {[\n                \"Sarah's Sweet Lemonade\",\n                \"Max's Marvelous Drinks\",\n                \"Neighborhood Refreshments\",\n              ].map((name, i) => (\n                <div\n                  key={i}\n                  className=\"min-w-[260px] bg-white p-4 rounded-lg shadow-md\"\n                >\n                  <div className=\"h-32 bg-yellow-200 rounded-md mb-3\"></div>\n                  <h3 className=\"font-bold\">{name}</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    {i === 0\n                      ? \"0.8 miles away\"\n                      : i === 1\n                      ? \"1.2 miles away\"\n                      : \"1.5 miles away\"}\n                  </p>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-yellow-50 rounded-lg p-6 text-center\">\n              <p className=\"text-gray-700 mb-4\">\n                Sign in to see featured stands in your area!\n              </p>\n              <Link\n                to=\"/login\"\n                className=\"inline-block bg-lemonade-yellow hover:bg-yellow-400 text-lemonade-blue-dark font-bold py-2 px-4 rounded-lg\"\n              >\n                Sign In\n              </Link>\n            </div>\n          )}\n        </div>\n              */}\n\n        {/* Map Section */}\n        <div className=\"bg-white rounded-xl shadow-lg p-4 mb-8\">\n          <div className=\"h-[100%] rounded-lg overflow-hidden p-4\">\n            <MapPage mapHeight=\"100%\" />\n          </div>\n        </div>\n\n        {/* Community Impact - Introduce once sufficient user base */}\n        {/*\n        <div className=\"bg-lemonade-blue-light text-white rounded-xl p-6 mb-8\">\n          <h2 className=\"text-2xl font-display font-bold mb-4\">\n            Our Community Impact\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold mb-2\">500+</div>\n              <div>Young Entrepreneurs</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold mb-2\">75</div>\n              <div>Cities Covered</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold mb-2\">10k+</div>\n              <div>Community Members</div>\n            </div>\n          </div>\n        </div> \n        */}\n\n        {/* Call to Action */}\n        <div className=\"bg-yellow-100 rounded-xl p-6 text-center\">\n          <h2 className=\"text-2xl font-display font-bold text-lemonade-blue-dark mb-4\">\n            Ready to Join Our Community?\n          </h2>\n          <p className=\"text-gray-700 mb-6 max-w-2xl mx-auto\">\n            Whether you're a young entrepreneur looking to promote your stand or\n            a community member eager to support local kids, Lemonade Map is for\n            you!\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link\n              to={isAuthenticated ? \"/seller/dashboard\" : \"/login\"}\n              className=\"bg-lemonade-yellow hover:bg-yellow-400 text-lemonade-blue-dark font-bold py-3 px-6 rounded-lg\"\n            >\n              Add Your Stand\n            </Link>\n            <Link\n              to=\"/about\"\n              className=\"bg-lemonade-blue-dark hover:bg-lemonade-blue text-white font-bold py-3 px-6 rounded-lg\"\n            >\n              Learn More\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","export default \"__VITE_PUBLIC_ASSET__cd9213d6__\""],"file":"assets/js/HomePage-C6H2ANmO.js"}