{"version":3,"mappings":"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","names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","MapViewUpdater","center","zoom","map","useMap","useEffect","setView","propTypes","PropTypes","arrayOf","number","UserLocationMarker","memo","showUserLocation","onUserLocationFound","position","setPosition","useState","accuracy","setAccuracy","locationCircleRef","useRef","location","getLocation","useGeolocation","icon","useMemo","iconSize","iconAnchor","popupAnchor","latlng","lat","lng","current","setLatLng","setRadius","circle","radius","color","fillColor","fillOpacity","weight","addTo","isSecureContext","locate","maxZoom","enableHighAccuracy","timeout","maximumAge","onLocationFound","e","onLocationError","on","off","remove","Marker","children","jsx","Popup","className","jsxs","Math","round","bool","func","StandMarker","stand","onStandClick","jsxRuntimeExports","location_lat","location_lng","eventHandlers","click","name","image_url","src","alt","loading","description","address","onClick","stopPropagation","id","shape","string","isRequired","Map","stands","height","props","memoizedStands","style","MapContainer","width","zoomControl","preferCanvas","attributionControl","minZoom","updateWhenZooming","updateWhenIdle","TileLayer","attribution","url","ZoomControl","StandCard","onViewProducts","onClose","Card","variant","hover","Header","Badge","distance","getProximityDescription","Body","optimizedImageUrl","imageUrl","includes","replace","startsWith","getResponsiveImageUrl","window","innerWidth","placeholderUrl","text","bgColor","textColor","btoa","createPlaceholderImage","decoding","fetchpriority","sizes","onError","target","onerror","fill","viewBox","fillRule","d","clipRule","formatDistance","Footer","Button","size","StandListSidebar","lazy","__vitePreload","Promise","resolve","then","StandListSidebar$1","__VITE_PRELOAD__","NearbyStandsList","import","MapPage","error","standsError","useStands","locationError","nearbyStands","useNearbyStands","selectedStand","setSelectedStand","mapCenter","setMapCenter","mapZoom","setMapZoom","activeTab","setActiveTab","setError","handleStandClick","displayedStands","mapComponent","Fragment","Loader","showLabel","label","SidebarLoadingFallback","sidebarComponent","Suspense","fallback","onStandSelect","onStandClose","userLocation","Alert","dismissible","onDismiss","ResponsiveMapLayout","ProductCard","product","parseFloat","price","toFixed","is_available","oneOfType","filteredStands","setFilteredStands","maxDistance","setMaxDistance","searchTerm","setSearchTerm","showFilters","setShowFilters","products","setProducts","loadingProducts","setLoadingProducts","productError","setProductError","result","filterStandsByDistance","trim","term","toLowerCase","filter","timer","setTimeout","sampleProducts","clearTimeout","handleResetFilters","length","prev","Form","Group","Label","htmlFor","Input","placeholder","value","onChange","Select","disabled","options","object","HomePage","isAuthenticated","useAuth","Link","to"],"ignoreList":[],"sources":["../../../src/components/map/Map.jsx","../../../src/components/map/MapControls.jsx","../../../src/utils/imageOptimization.jsx","../../../src/components/map/StandCard.jsx","../../../src/components/map/MapView.jsx","../../../src/components/map/MapPage.jsx","../../../src/components/map/ProductCard.jsx","../../../src/components/map/StandListSidebar.jsx","../../../src/pages/HomePage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  useMap,\n  ZoomControl,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { useGeolocation } from \"../../contexts/GeolocationContext\";\nimport { isSecureContext } from \"../../services/geolocationService\";\n\n// Fix for default marker icons in react-leaflet\n// This is needed because the default markers use relative paths that don't work in React\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: null,\n  iconUrl: null,\n  shadowUrl: null,\n});\n\n// Custom lemonade stand marker icon\nconst createLemonadeIcon = () =>\n  new L.Icon({\n    iconUrl: \"/images/markers/lemonade-marker.svg\",\n    iconSize: [40, 48],\n    iconAnchor: [20, 48],\n    popupAnchor: [0, -48],\n  });\n\n// Custom user location marker icon\nconst createUserLocationIcon = () =>\n  new L.Icon({\n    iconUrl: \"/images/markers/user-location.svg\",\n    iconSize: [24, 24],\n    iconAnchor: [12, 12],\n    popupAnchor: [0, -12],\n  });\n\n// Component to handle map view updates\nconst MapViewUpdater = ({ center, zoom }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (center) {\n      map.setView(center, zoom);\n    }\n  }, [center, zoom, map]);\n\n  return null;\n};\n\nMapViewUpdater.propTypes = {\n  center: PropTypes.arrayOf(PropTypes.number),\n  zoom: PropTypes.number,\n};\n\n// Component to handle user location - memoized to prevent unnecessary re-renders\nconst UserLocationMarker = memo(({ showUserLocation, onUserLocationFound }) => {\n  const [position, setPosition] = useState(null);\n  const [accuracy, setAccuracy] = useState(null);\n  const map = useMap();\n  const locationCircleRef = useRef(null);\n  const { location, getLocation } = useGeolocation();\n\n  // Memoize the icon creation\n  const icon = useMemo(() => createUserLocationIcon(), []);\n\n  // Update position when location changes from context\n  useEffect(() => {\n    if (location && showUserLocation) {\n      const latlng = { lat: location.lat, lng: location.lng };\n      setPosition([latlng.lat, latlng.lng]);\n      setAccuracy(location.accuracy || 0);\n\n      // Create or update accuracy circle\n      if (locationCircleRef.current) {\n        locationCircleRef.current.setLatLng(latlng);\n        locationCircleRef.current.setRadius(location.accuracy || 100);\n      } else {\n        locationCircleRef.current = L.circle(latlng, {\n          radius: location.accuracy || 100,\n          color: \"#4285F4\",\n          fillColor: \"#4285F4\",\n          fillOpacity: 0.1,\n          weight: 1,\n        }).addTo(map);\n      }\n    }\n  }, [location, map, showUserLocation]); // Use location instead of position to avoid circular dependency\n  \n  // Separate useEffect for notifying parent to prevent infinite loops\n  useEffect(() => {\n    if (position && onUserLocationFound) { // Use position instead of location to avoid circular dependency\n      const latlng = { lat: position[0], lng: position[1] };\n      onUserLocationFound(latlng);\n    }\n  }, [position, showUserLocation, onUserLocationFound]);\n  \n  // Use Leaflet's locate method as a fallback - optimized to reduce unnecessary work\n  useEffect(() => {\n    if (!showUserLocation) {\n      if (locationCircleRef.current) {\n        locationCircleRef.current.remove();\n        locationCircleRef.current = null;\n      }\n      return;\n    }\n\n    // Check if we're in a secure context before trying to get location\n    if (!isSecureContext()) {\n      console.warn(\"Geolocation is not available in insecure contexts (non-HTTPS)\");\n      return;\n    }\n\n    // If we don't have a location from context, try to get it using Leaflet\n    if (!location) {\n      // Use a more efficient locate method for mobile\n      map.locate({\n        setView: true,\n        maxZoom: 16,\n        enableHighAccuracy: false, // Less battery usage on mobile\n        timeout: 10000, // Timeout after 10 seconds\n        maximumAge: 60000, // Allow cached positions up to 1 minute old\n      });\n\n      const onLocationFound = (e) => {\n        setPosition([e.latlng.lat, e.latlng.lng]);\n        setAccuracy(e.accuracy);\n\n        // Create or update accuracy circle\n        if (locationCircleRef.current) {\n          locationCircleRef.current.setLatLng(e.latlng);\n          locationCircleRef.current.setRadius(e.accuracy);\n        } else {\n          locationCircleRef.current = L.circle(e.latlng, {\n            radius: e.accuracy,\n            color: \"#4285F4\",\n            fillColor: \"#4285F4\",\n            fillOpacity: 0.1,\n            weight: 1,\n          }).addTo(map);\n        }\n\n        // We've moved the notification to a separate useEffect to prevent infinite loops\n      };\n\n      const onLocationError = (e) => {\n        console.error(\"Error getting location from Leaflet:\", e.message);\n        // Only try to get location using our geolocation service if we're in a secure context\n        if (isSecureContext()) {\n          getLocation();\n        }\n      };\n\n      map.on(\"locationfound\", onLocationFound);\n      map.on(\"locationerror\", onLocationError);\n\n      return () => {\n        map.off(\"locationfound\", onLocationFound);\n        map.off(\"locationerror\", onLocationError);\n      };\n    }\n\n    return () => {\n      if (locationCircleRef.current) {\n        locationCircleRef.current.remove();\n        locationCircleRef.current = null;\n      }\n    };\n  }, [map, showUserLocation, onUserLocationFound, location, getLocation]);\n\n  // Only render the marker if we have a position\n  return position ? (\n    <Marker position={position} icon={icon}>\n      <Popup>\n        <div>\n          <h3 className=\"font-display text-base\">Your Location</h3>\n          <p className=\"text-sm\">Accuracy: {Math.round(accuracy)} meters</p>\n        </div>\n      </Popup>\n    </Marker>\n  ) : null;\n});\n\nUserLocationMarker.propTypes = {\n  showUserLocation: PropTypes.bool,\n  onUserLocationFound: PropTypes.func,\n};\n\n// Memoized StandMarker component to prevent unnecessary re-renders\nconst StandMarker = memo(({ stand, onStandClick }) => {\n  // Memoize the icon creation\n  const icon = useMemo(() => createLemonadeIcon(), []);\n\n  return (\n    <Marker\n      key={stand.id}\n      position={[stand.location_lat, stand.location_lng]}\n      icon={icon}\n      eventHandlers={{\n        click: () => {\n          if (onStandClick) {\n            onStandClick(stand);\n          }\n        },\n      }}\n    >\n      <Popup>\n        <div className=\"text-center\">\n          <h3 className=\"font-display text-lg text-lemonade-yellow-dark\">\n            {stand.name}\n          </h3>\n          {stand.image_url && (\n            <img\n              src={stand.image_url}\n              alt={stand.name}\n              className=\"w-32 h-32 object-cover mx-auto my-2 rounded-lg\"\n              loading=\"lazy\" // Add lazy loading for images\n            />\n          )}\n          <p className=\"text-sm\">{stand.description}</p>\n          <p className=\"text-xs mt-2 text-gray-600\">{stand.address}</p>\n          <button\n            className=\"mt-2 px-3 py-1 bg-lemonade-yellow text-gray-800 rounded-full text-sm font-display hover:bg-lemonade-yellow-dark\"\n            onClick={(e) => {\n              e.stopPropagation();\n              if (onStandClick) {\n                onStandClick(stand);\n              }\n            }}\n          >\n            View Details\n          </button>\n        </div>\n      </Popup>\n    </Marker>\n  );\n});\n\nStandMarker.propTypes = {\n  stand: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    location_lat: PropTypes.number.isRequired,\n    location_lng: PropTypes.number.isRequired,\n    address: PropTypes.string,\n    image_url: PropTypes.string,\n  }).isRequired,\n  onStandClick: PropTypes.func,\n};\n\n/**\n * Map component for displaying lemonade stands\n */\nconst Map = ({\n  stands = [],\n  center = [40.7128, -74.006], // Default to New York City\n  zoom = 13,\n  height = \"500px\",\n  showUserLocation = true,\n  onStandClick,\n  onUserLocationFound,\n  className = \"\",\n  ...props\n}) => {\n  // Memoize the stands array to prevent unnecessary re-renders\n  const memoizedStands = useMemo(() => stands, [stands]);\n\n  return (\n    <div\n      className={`rounded-xl overflow-hidden shadow-playful ${className}`}\n      style={{ height }}\n      {...props}\n    >\n      <MapContainer\n        center={center}\n        zoom={zoom}\n        style={{ height: \"100%\", width: \"100%\" }}\n        zoomControl={false}\n        // Add performance optimizations for mobile\n        preferCanvas={true}\n        attributionControl={false}\n        minZoom={5}\n        maxZoom={18}\n        updateWhenZooming={false}\n        updateWhenIdle={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n\n        <ZoomControl position=\"bottomright\" />\n\n        {/* Update map view when center or zoom changes */}\n        <MapViewUpdater center={center} zoom={zoom} />\n\n        {/* Show user location if enabled */}\n        <UserLocationMarker\n          showUserLocation={showUserLocation}\n          onUserLocationFound={onUserLocationFound}\n        />\n\n        {/* Render lemonade stand markers */}\n        {memoizedStands.map((stand) => (\n          <StandMarker\n            key={stand.id}\n            stand={stand}\n            onStandClick={onStandClick}\n          />\n        ))}\n      </MapContainer>\n    </div>\n  );\n};\n\nMap.propTypes = {\n  stands: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      location_lat: PropTypes.number.isRequired,\n      location_lng: PropTypes.number.isRequired,\n      address: PropTypes.string,\n      image_url: PropTypes.string,\n    })\n  ),\n  center: PropTypes.arrayOf(PropTypes.number),\n  zoom: PropTypes.number,\n  height: PropTypes.string,\n  showUserLocation: PropTypes.bool,\n  onStandClick: PropTypes.func,\n  onUserLocationFound: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default Map;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '../ui';\n\n/**\n * MapControls component for controlling map features\n */\nconst MapControls = ({\n  showUserLocation,\n  onToggleUserLocation,\n  onCenterUserLocation,\n  onRefreshStands,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div \n      className={`flex flex-wrap gap-2 ${className}`}\n      {...props}\n    >\n      <Button\n        size=\"sm\"\n        variant={showUserLocation ? 'primary' : 'outline'}\n        onClick={onToggleUserLocation}\n      >\n        {showUserLocation ? 'Hide My Location' : 'Show My Location'}\n      </Button>\n      \n      <Button\n        size=\"sm\"\n        variant=\"secondary\"\n        onClick={onCenterUserLocation}\n        disabled={!showUserLocation}\n      >\n        Center on Me\n      </Button>\n      \n      <Button\n        size=\"sm\"\n        variant=\"accent\"\n        onClick={onRefreshStands}\n      >\n        Refresh Stands\n      </Button>\n    </div>\n  );\n};\n\nMapControls.propTypes = {\n  showUserLocation: PropTypes.bool,\n  onToggleUserLocation: PropTypes.func,\n  onCenterUserLocation: PropTypes.func,\n  onRefreshStands: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default MapControls;","/**\n * Utility functions for image optimization\n */\n\n/**\n * Generates a responsive image URL based on screen size\n * @param {string} imageUrl - Original image URL\n * @param {number} width - Requested width\n * @returns {string} - Optimized image URL\n */\nexport const getResponsiveImageUrl = (imageUrl, width = 400) => {\n  if (!imageUrl) return '';\n  \n  // If the image is already from an image service that supports resizing\n  if (imageUrl.includes('cloudinary.com')) {\n    // Example: Cloudinary transformation\n    return imageUrl.replace('/upload/', `/upload/w_${width},q_auto,f_auto/`);\n  }\n  \n  // If the image is from our own server, we can use a simple query parameter\n  if (imageUrl.startsWith('/')) {\n    return `${imageUrl}?width=${width}`;\n  }\n  \n  // For other images, return the original URL\n  return imageUrl;\n};\n\n/**\n * Determines if an image should be lazy loaded based on its position\n * @param {number} index - Index of the image in a list\n * @param {number} threshold - Number of images to eagerly load\n * @returns {string} - 'lazy' or 'eager'\n */\nexport const getLazyLoadingStrategy = (index, threshold = 3) => {\n  return index < threshold ? 'eager' : 'lazy';\n};\n\n/**\n * Creates a placeholder image URL for when images fail to load\n * @param {string} text - Text to display on the placeholder\n * @param {string} bgColor - Background color\n * @param {string} textColor - Text color\n * @returns {string} - Data URL for a placeholder image\n */\nexport const createPlaceholderImage = (\n  text = 'Image not available',\n  bgColor = 'F8E8A2',\n  textColor = '333333'\n) => {\n  // Create a simple SVG placeholder\n  const svg = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"200\" viewBox=\"0 0 300 200\">\n      <rect width=\"300\" height=\"200\" fill=\"#${bgColor}\"/>\n      <text x=\"50%\" y=\"50%\" font-family=\"Arial, sans-serif\" font-size=\"16\" text-anchor=\"middle\" fill=\"#${textColor}\">${text}</text>\n    </svg>\n  `;\n  \n  // Convert to base64 data URL\n  return `data:image/svg+xml;base64,${btoa(svg)}`;\n};\n\n/**\n * Preloads critical images\n * @param {Array<string>} imageUrls - Array of image URLs to preload\n */\nexport const preloadCriticalImages = (imageUrls = []) => {\n  if (!imageUrls.length) return;\n  \n  imageUrls.forEach(url => {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = 'image';\n    link.href = url;\n    document.head.appendChild(link);\n  });\n};","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Badge } from '../ui';\nimport { formatDistance, getProximityDescription } from '../../services/geolocationService';\nimport { getResponsiveImageUrl, createPlaceholderImage } from '../../utils/imageOptimization';\n\n/**\n * StandCard component for displaying lemonade stand information\n */\nconst StandCard = ({\n  stand,\n  onViewProducts,\n  onClose,\n  className = '',\n  ...props\n}) => {\n  if (!stand) return null;\n  \n  return (\n    <Card\n      className={`w-full ${className}`}\n      variant=\"yellow\"\n      hover={false}\n      {...props}\n    >\n      <Card.Header className=\"flex justify-between items-start\">\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-lg md:text-xl font-display text-lemonade-yellow-dark truncate\">{stand.name}</h3>\n          <p className=\"text-xs md:text-sm text-gray-600 truncate\">{stand.address}</p>\n        </div>\n        <div className=\"flex flex-col items-end gap-1 md:gap-2 ml-2\">\n          <Badge variant=\"yellow\" className=\"text-xs md:text-sm\">Open</Badge>\n          {stand.distance !== null && stand.distance !== undefined && (\n            <Badge variant=\"blue\" className=\"text-xs md:text-sm\">{getProximityDescription(stand.distance)}</Badge>\n          )}\n        </div>\n      </Card.Header>\n      \n      <Card.Body>\n        {stand.image_url && (\n          <div className=\"relative w-full h-32 md:h-48 mb-4\">\n            {useMemo(() => {\n              // Get responsive image URL based on device width\n              const optimizedImageUrl = getResponsiveImageUrl(\n                stand.image_url, \n                window.innerWidth < 768 ? 320 : 480\n              );\n              \n              // Create placeholder for fallback\n              const placeholderUrl = createPlaceholderImage(stand.name);\n              \n              return (\n                <img \n                  src={optimizedImageUrl} \n                  alt={stand.name}\n                  className=\"w-full h-full object-cover rounded-lg\"\n                  loading=\"lazy\"\n                  decoding=\"async\"\n                  fetchpriority=\"low\"\n                  sizes=\"(max-width: 768px) 320px, 480px\"\n                  onError={(e) => {\n                    // Fallback for image loading errors\n                    e.target.onerror = null;\n                    e.target.src = placeholderUrl;\n                  }}\n                />\n              );\n            }, [stand.image_url, stand.name])}\n          </div>\n        )}\n        \n        <p className=\"text-sm md:text-base text-gray-700\">{stand.description}</p>\n        \n        <div className=\"mt-3 md:mt-4 flex items-center text-xs md:text-sm text-gray-600\">\n          <svg className=\"w-4 h-4 mr-1 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clipRule=\"evenodd\" />\n          </svg>\n          <span>\n            {stand.distance !== null && stand.distance !== undefined \n              ? formatDistance(stand.distance, 'miles')\n              : 'Distance unknown'}\n          </span>\n        </div>\n      </Card.Body>\n      \n      <Card.Footer className=\"flex flex-col sm:flex-row sm:justify-between gap-2\">\n        <Button\n          variant=\"outline\"\n          onClick={onClose}\n          size=\"sm\"\n          className=\"w-full sm:w-auto text-sm\"\n        >\n          Back to Map\n        </Button>\n        \n        {onViewProducts && (\n          <Button\n            variant=\"primary\"\n            onClick={() => onViewProducts(stand)}\n            size=\"sm\"\n            className=\"w-full sm:w-auto text-sm\"\n          >\n            View Products\n          </Button>\n        )}\n      </Card.Footer>\n    </Card>\n  );\n};\n\nStandCard.propTypes = {\n  stand: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    address: PropTypes.string,\n    image_url: PropTypes.string,\n    distance: PropTypes.number,\n  }),\n  onViewProducts: PropTypes.func,\n  onClose: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default StandCard;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Map from './Map';\nimport MapControls from './MapControls';\nimport StandCard from './StandCard';\nimport { Card, Loader } from '../ui';\n\n/**\n * MapView component that combines Map, MapControls, and StandCard\n */\nconst MapView = ({\n  stands = [],\n  loading = false,\n  onRefreshStands,\n  onViewProducts,\n  className = '',\n  ...props\n}) => {\n  const [showUserLocation, setShowUserLocation] = useState(true);\n  const [selectedStand, setSelectedStand] = useState(null);\n  const [mapCenter, setMapCenter] = useState(null);\n  const [mapZoom, setMapZoom] = useState(13);\n  const [userPosition, setUserPosition] = useState(null);\n  \n  // Get user's location on initial load\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserPosition([latitude, longitude]);\n          \n          // If no stands are selected, center map on user's location\n          if (!selectedStand) {\n            setMapCenter([latitude, longitude]);\n          }\n        },\n        (error) => {\n          console.error('Error getting user location:', error);\n          // Default to a central location if geolocation fails\n          if (!mapCenter && stands.length > 0) {\n            // Use the first stand's location as default\n            setMapCenter([stands[0].location_lat, stands[0].location_lng]);\n          } else if (!mapCenter) {\n            // Default to New York City if no stands\n            setMapCenter([40.7128, -74.0060]);\n          }\n        }\n      );\n    }\n  }, []);\n  \n  // Handle toggling user location\n  const handleToggleUserLocation = () => {\n    setShowUserLocation(!showUserLocation);\n  };\n  \n  // Handle centering on user location\n  const handleCenterUserLocation = () => {\n    if (userPosition) {\n      setMapCenter(userPosition);\n      setMapZoom(16);\n    }\n  };\n  \n  // Handle stand click\n  const handleStandClick = (stand) => {\n    setSelectedStand(stand);\n    setMapCenter([stand.location_lat, stand.location_lng]);\n    setMapZoom(16);\n  };\n  \n  // Handle closing stand card\n  const handleCloseStandCard = () => {\n    setSelectedStand(null);\n  };\n  \n  // Calculate default map center if not set\n  const defaultCenter = mapCenter || \n    (stands.length > 0 ? [stands[0].location_lat, stands[0].location_lng] : [40.7128, -74.0060]);\n  \n  return (\n    <div className={`${className}`} {...props}>\n      <div className=\"mb-4\">\n        <MapControls\n          showUserLocation={showUserLocation}\n          onToggleUserLocation={handleToggleUserLocation}\n          onCenterUserLocation={handleCenterUserLocation}\n          onRefreshStands={onRefreshStands}\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n        <div className=\"lg:col-span-2\">\n          {loading ? (\n            <Card className=\"flex items-center justify-center\" style={{ height: '500px' }}>\n              <Loader size=\"lg\" variant=\"yellow\" showLabel label=\"Loading map...\" />\n            </Card>\n          ) : (\n            <Map\n              stands={stands}\n              center={defaultCenter}\n              zoom={mapZoom}\n              height=\"500px\"\n              showUserLocation={showUserLocation}\n              onStandClick={handleStandClick}\n            />\n          )}\n        </div>\n        \n        <div>\n          {selectedStand ? (\n            <StandCard\n              stand={selectedStand}\n              onViewProducts={onViewProducts}\n              onClose={handleCloseStandCard}\n            />\n          ) : (\n            <Card>\n              <Card.Header>\n                <h3 className=\"text-xl font-display\">Lemonade Stands</h3>\n              </Card.Header>\n              <Card.Body>\n                <p>\n                  {stands.length > 0\n                    ? `Found ${stands.length} lemonade stands near you. Click on a marker to see details.`\n                    : 'No lemonade stands found. Try refreshing or changing your location.'}\n                </p>\n              </Card.Body>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMapView.propTypes = {\n  stands: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      location_lat: PropTypes.number.isRequired,\n      location_lng: PropTypes.number.isRequired,\n      address: PropTypes.string,\n      image_url: PropTypes.string,\n    })\n  ),\n  loading: PropTypes.bool,\n  onRefreshStands: PropTypes.func,\n  onViewProducts: PropTypes.func,\n  className: PropTypes.string,\n};\n\nexport default MapView;","import React, { useState, useEffect, useMemo, lazy, Suspense } from 'react';\nimport Map from './Map';\nimport { Alert, Loader, Button } from '../ui';\nimport { ResponsiveMapLayout } from '../layout';\nimport { useGeolocation } from '../../contexts/GeolocationContext';\nimport { useStands } from '../../contexts/StandContext';\nimport { useNearbyStands } from '../../contexts/NearbyStandsContext';\n\n// Lazy load components that aren't needed immediately\nconst StandListSidebar = lazy(() => import('./StandListSidebar'));\nconst NearbyStandsList = lazy(() => import('./NearbyStandsList'));\n\nconst MapPage = () => {\n  const { stands, loading, error: standsError } = useStands();\n  const { location, getLocation, error: locationError } = useGeolocation();\n  const { nearbyStands } = useNearbyStands();\n  \n  const [selectedStand, setSelectedStand] = useState(null);\n  const [mapCenter, setMapCenter] = useState([40.7128, -74.0060]); // Default to NYC\n  const [mapZoom, setMapZoom] = useState(13);\n  const [activeTab, setActiveTab] = useState('all'); // 'all' or 'nearby'\n  const [error, setError] = useState(null);\n  \n  // Set error from context errors\n  useEffect(() => {\n    if (standsError) {\n      setError(standsError);\n    } else if (locationError && activeTab === 'nearby') {\n      setError(locationError);\n    } else {\n      setError(null);\n    }\n  }, [standsError, locationError, activeTab]);\n  \n  // Handle stand click\n  const handleStandClick = (stand) => {\n    setSelectedStand(stand);\n    setMapCenter([stand.location_lat, stand.location_lng]);\n    setMapZoom(16);\n  };\n  \n  // Handle closing stand details\n  const handleCloseStand = () => {\n    setSelectedStand(null);\n    if (location) {\n      setMapCenter([location.lat, location.lng]);\n    } else {\n      setMapCenter([40.7128, -74.0060]); // Default to NYC\n    }\n    setMapZoom(13);\n  };\n  \n  // Handle user location found\n  const handleUserLocationFound = (latlng) => {\n    if (latlng && latlng.lat && latlng.lng && \n        (mapCenter[0] !== latlng.lat || mapCenter[1] !== latlng.lng)) { // Only update if position has changed\n      // Center map on user location\n      setMapCenter([latlng.lat, latlng.lng]);\n    }\n  };\n  \n  // Memoize the displayed stands to prevent unnecessary re-renders\n  const displayedStands = useMemo(() => {\n    if (activeTab === 'nearby') {\n      return nearbyStands;\n    }\n    return stands;\n  }, [activeTab, nearbyStands, stands]);\n  \n  // Map component\n  const mapComponent = (\n    <>\n      <Map\n        stands={displayedStands}\n        center={mapCenter}\n        zoom={mapZoom}\n        height=\"calc(100vh - 200px)\"\n        showUserLocation={true}\n        onStandClick={handleStandClick}\n        onUserLocationFound={handleUserLocationFound}\n        className={loading ? 'opacity-60' : ''}\n      />\n      \n      {loading && (\n        <div className=\"flex justify-center mt-4\">\n          <Loader size=\"lg\" variant=\"yellow\" showLabel label=\"Loading lemonade stands...\" />\n        </div>\n      )}\n    </>\n  );\n  \n  // Sidebar loading fallback\n  const SidebarLoadingFallback = () => (\n    <div className=\"flex items-center justify-center h-full\">\n      <Loader size=\"md\" variant=\"yellow\" showLabel label=\"Loading...\" />\n    </div>\n  );\n\n  // Memoize the stands data to prevent unnecessary re-renders\n  const memoizedStands = useMemo(() => stands, [stands]);\n  \n  // Sidebar component with tabs\n  const sidebarComponent = (\n    <div className=\"h-[calc(100vh-200px)] flex flex-col\">\n      {/* Tab navigation */}\n      <div className=\"flex mb-4\">\n        <Button\n          variant={activeTab === 'all' ? 'primary' : 'outline'}\n          className=\"flex-1 rounded-r-none\"\n          onClick={() => setActiveTab('all')}\n        >\n          All Stands\n        </Button>\n        <Button\n          variant={activeTab === 'nearby' ? 'primary' : 'outline'}\n          className=\"flex-1 rounded-l-none\"\n          onClick={() => {\n            setActiveTab('nearby');\n            if (!location) {\n              getLocation();\n            }\n          }}\n        >\n          Near You\n        </Button>\n      </div>\n      \n      {/* Tab content with Suspense for lazy loading */}\n      <div className=\"flex-grow\">\n        <Suspense fallback={<SidebarLoadingFallback />}>\n          {activeTab === 'all' ? (\n            <StandListSidebar\n              stands={memoizedStands}\n              loading={loading}\n              selectedStand={selectedStand}\n              onStandSelect={handleStandClick}\n              onStandClose={handleCloseStand}\n              userLocation={location}\n              className=\"h-full\"\n            />\n          ) : (\n            <NearbyStandsList\n              onStandSelect={handleStandClick}\n              className=\"h-full\"\n            />\n          )}\n        </Suspense>\n      </div>\n    </div>\n  );\n  \n  return (\n    <div className=\"w-full\">\n      <h1 className=\"text-2xl md:text-3xl font-display text-lemonade-blue-dark mb-4\">Find Lemonade Stands</h1>\n      \n      {error && (\n        <Alert variant=\"error\" className=\"mb-4\" dismissible onDismiss={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n      \n      <ResponsiveMapLayout\n        mapComponent={mapComponent}\n        sidebarComponent={sidebarComponent}\n      />\n    </div>\n  );\n};\n\nexport default MapPage;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Badge } from '../ui';\n\n/**\n * ProductCard component for displaying product information\n */\nconst ProductCard = ({ product, className = '', ...props }) => {\n  if (!product) return null;\n\n  return (\n    <Card\n      className={`w-full ${className}`}\n      variant=\"white\"\n      hover={false}\n      {...props}\n    >\n      <div className=\"flex flex-col sm:flex-row\">\n        {product.image_url && (\n          <div className=\"sm:w-1/3 flex-shrink-0\">\n            <img\n              src={product.image_url}\n              alt={product.name}\n              className=\"w-full h-28 sm:h-32 md:h-full object-cover rounded-t-lg sm:rounded-l-lg sm:rounded-t-none\"\n            />\n          </div>\n        )}\n\n        <div className={`p-3 sm:p-4 flex-1 ${!product.image_url ? 'sm:w-full' : 'sm:w-2/3'}`}>\n          <div className=\"flex justify-between items-start mb-1 sm:mb-2\">\n            <h3 className=\"text-base sm:text-lg font-display text-lemonade-blue-dark truncate max-w-[70%]\">{product.name}</h3>\n            <Badge variant=\"yellow\" className=\"ml-2 text-xs sm:text-sm whitespace-nowrap\">${parseFloat(product.price).toFixed(2)}</Badge>\n          </div>\n\n          {product.description && (\n            <p className=\"text-gray-700 text-xs sm:text-sm line-clamp-3\">{product.description}</p>\n          )}\n\n          <div className=\"flex justify-start items-center mt-2\">\n            {product.is_available === false ? (\n              <Badge variant=\"red\" className=\"text-xs\">Sold Out</Badge>\n            ) : (\n              <Badge variant=\"green\" className=\"text-xs\">Available</Badge>\n            )}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nProductCard.propTypes = {\n  product: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    price: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    image_url: PropTypes.string,\n    is_available: PropTypes.bool\n  }).isRequired,\n  className: PropTypes.string\n};\n\nexport default ProductCard;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Form, Alert, Loader } from '../ui';\nimport ProductCard from './ProductCard';\nimport StandCard from './StandCard';\nimport { filterStandsByDistance } from '../../utils/distance';\nimport { formatDistance, getProximityDescription } from '../../services/geolocationService';\n\n/**\n * StandListSidebar component for displaying and filtering lemonade stands\n */\nconst StandListSidebar = ({\n  stands = [],\n  loading = false,\n  selectedStand = null,\n  onStandSelect,\n  onStandClose,\n  userLocation = null,\n  className = '',\n  ...props\n}) => {\n  const [filteredStands, setFilteredStands] = useState(stands);\n  const [maxDistance, setMaxDistance] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [products, setProducts] = useState([]);\n  const [loadingProducts, setLoadingProducts] = useState(false);\n  const [productError, setProductError] = useState(null);\n\n  // Update filtered stands when stands, maxDistance, or searchTerm changes\n  useEffect(() => {\n    let result = [...stands];\n\n    // Filter by distance if maxDistance is set and user location is available\n    if (maxDistance !== null && userLocation) {\n      result = filterStandsByDistance(result, maxDistance);\n    }\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      const term = searchTerm.toLowerCase();\n      result = result.filter(\n        stand =>\n          stand.name.toLowerCase().includes(term) ||\n          (stand.description && stand.description.toLowerCase().includes(term)) ||\n          (stand.address && stand.address.toLowerCase().includes(term))\n      );\n    }\n\n    setFilteredStands(result);\n  }, [stands, maxDistance, searchTerm, userLocation]);\n\n  // Simulate fetching products when a stand is selected\n  useEffect(() => {\n    if (selectedStand) {\n      setLoadingProducts(true);\n      setProductError(null);\n      \n      // Simulate API call delay\n      const timer = setTimeout(() => {\n        // In a real app, this would be an API call to fetch products\n        // For now, we'll use sample data\n        const sampleProducts = [\n          {\n            id: `${selectedStand.id}-1`,\n            name: 'Classic Lemonade',\n            description: 'Our signature lemonade made with fresh lemons and organic sugar.',\n            price: 2.99,\n            image_url: 'https://images.unsplash.com/photo-1621263764928-df1444c5e859?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',\n            is_available: true\n          },\n          {\n            id: `${selectedStand.id}-2`,\n            name: 'Strawberry Lemonade',\n            description: 'Classic lemonade infused with fresh strawberries.',\n            price: 3.49,\n            image_url: 'https://images.unsplash.com/photo-1497534446932-c925b458314e?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',\n            is_available: true\n          },\n          {\n            id: `${selectedStand.id}-3`,\n            name: 'Blueberry Mint Lemonade',\n            description: 'A refreshing blend of lemonade with blueberries and fresh mint.',\n            price: 3.99,\n            image_url: 'https://images.unsplash.com/photo-1556881286-fc6915169721?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',\n            is_available: false\n          }\n        ];\n        \n        setProducts(sampleProducts);\n        setLoadingProducts(false);\n      }, 1000);\n      \n      return () => clearTimeout(timer);\n    } else {\n      setProducts([]);\n    }\n  }, [selectedStand]);\n\n  // Handle distance filter change\n  const handleDistanceChange = (e) => {\n    const value = e.target.value;\n    setMaxDistance(value === '' ? null : parseFloat(value));\n  };\n\n  // Handle search term change\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  // Reset filters\n  const handleResetFilters = () => {\n    setMaxDistance(null);\n    setSearchTerm('');\n  };\n\n  // Toggle filters visibility\n  const toggleFilters = () => {\n    setShowFilters(prev => !prev);\n  };\n\n  return (\n    <div className={`flex flex-col h-full ${className}`} {...props}>\n      {selectedStand ? (\n        <div className=\"flex flex-col h-full\">\n          <StandCard\n            stand={selectedStand}\n            onClose={onStandClose}\n            className=\"mb-4\"\n          />\n          \n          <Card className=\"flex-grow overflow-auto\">\n            <Card.Header>\n              <h3 className=\"text-xl font-display text-lemonade-blue-dark\">Products</h3>\n            </Card.Header>\n            \n            <Card.Body>\n              {loadingProducts ? (\n                <div className=\"flex justify-center py-8\">\n                  <Loader variant=\"yellow\" />\n                </div>\n              ) : productError ? (\n                <Alert variant=\"error\">\n                  {productError}\n                </Alert>\n              ) : products.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {products.map(product => (\n                    <ProductCard\n                      key={product.id}\n                      product={product}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center py-4 text-gray-500\">\n                  No products available for this stand.\n                </p>\n              )}\n            </Card.Body>\n          </Card>\n        </div>\n      ) : (\n        <Card className=\"h-full flex flex-col\">\n          <Card.Header>\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-display text-lemonade-blue-dark\">Lemonade Stands</h2>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={toggleFilters}\n              >\n                {showFilters ? 'Hide Filters' : 'Show Filters'}\n              </Button>\n            </div>\n          </Card.Header>\n          \n          {showFilters && (\n            <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\n              <Form.Group>\n                <Form.Label htmlFor=\"search\">Search</Form.Label>\n                <Form.Input\n                  id=\"search\"\n                  placeholder=\"Search by name or address\"\n                  value={searchTerm}\n                  onChange={handleSearchChange}\n                />\n              </Form.Group>\n              \n              <Form.Group>\n                <Form.Label htmlFor=\"distance\">Maximum Distance ({userLocation ? 'miles' : 'unavailable'})</Form.Label>\n                <Form.Select\n                  id=\"distance\"\n                  value={maxDistance || ''}\n                  onChange={handleDistanceChange}\n                  disabled={!userLocation}\n                  options={[\n                    { value: '', label: 'Any distance' },\n                    { value: '1', label: '1 mile' },\n                    { value: '5', label: '5 miles' },\n                    { value: '10', label: '10 miles' },\n                    { value: '25', label: '25 miles' },\n                    { value: '50', label: '50 miles' }\n                  ]}\n                />\n                {!userLocation && (\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Enable location services to filter by distance\n                  </p>\n                )}\n              </Form.Group>\n              \n              <div className=\"flex justify-end mt-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleResetFilters}\n                >\n                  Reset Filters\n                </Button>\n              </div>\n            </div>\n          )}\n          \n          <Card.Body className=\"flex-grow overflow-auto\">\n            {loading ? (\n              <div className=\"flex justify-center py-8\">\n                <Loader variant=\"yellow\" />\n              </div>\n            ) : filteredStands.length > 0 ? (\n              <div className=\"space-y-4\">\n                {filteredStands.map(stand => (\n                  <div \n                    key={stand.id} \n                    className=\"p-3 bg-lemonade-yellow-light rounded-lg cursor-pointer hover:bg-lemonade-yellow-dark transition-colors\"\n                    onClick={() => onStandSelect(stand)}\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <h3 className=\"font-display text-lg\">{stand.name}</h3>\n                      {stand.distance !== null && stand.distance !== undefined && (\n                        <span className=\"text-xs bg-white px-2 py-1 rounded-full\">\n                          {formatDistance(stand.distance, 'miles')}\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-700 line-clamp-2\">{stand.description}</p>\n                    <div className=\"flex justify-between items-center mt-1\">\n                      <p className=\"text-xs text-gray-600\">{stand.address}</p>\n                      {stand.distance !== null && stand.distance !== undefined && (\n                        <span className=\"text-xs font-medium text-lemonade-blue-dark\">\n                          {getProximityDescription(stand.distance)}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No lemonade stands found.</p>\n                {(maxDistance !== null || searchTerm) && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleResetFilters}\n                    className=\"mt-2\"\n                  >\n                    Clear Filters\n                  </Button>\n                )}\n              </div>\n            )}\n          </Card.Body>\n          \n          <Card.Footer>\n            <p className=\"text-sm text-gray-600\">\n              {filteredStands.length} {filteredStands.length === 1 ? 'stand' : 'stands'} found\n              {maxDistance !== null && userLocation && ` within ${maxDistance} miles`}\n            </p>\n          </Card.Footer>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nStandListSidebar.propTypes = {\n  stands: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      address: PropTypes.string,\n      location_lat: PropTypes.number,\n      location_lng: PropTypes.number,\n      image_url: PropTypes.string,\n      distance: PropTypes.number\n    })\n  ),\n  loading: PropTypes.bool,\n  selectedStand: PropTypes.object,\n  onStandSelect: PropTypes.func.isRequired,\n  onStandClose: PropTypes.func.isRequired,\n  userLocation: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired\n  }),\n  className: PropTypes.string\n};\n\nexport default StandListSidebar;","import React from 'react';\nimport { MapPage } from '../components/map';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link } from 'react-router-dom';\n\n/**\n * Home page component that displays the map of lemonade stands\n * @returns {JSX.Element} - Home page component\n */\nconst HomePage = () => {\n  const { isAuthenticated } = useAuth();\n  \n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-6 flex flex-col md:flex-row justify-between items-start md:items-center\">\n        <div>\n          <h1 className=\"text-3xl font-display text-lemonade-blue-dark mb-2\">\n            Find Lemonade Stands Near You\n          </h1>\n          <p className=\"text-gray-600 mb-4\">\n            Browse the map to discover refreshing lemonade stands in your area\n          </p>\n        </div>\n        \n        {!isAuthenticated && (\n          <div className=\"bg-white p-4 rounded-lg shadow-md\">\n            <p className=\"text-gray-700 mb-3\">\n              Are you a lemonade stand owner?\n            </p>\n            <div className=\"flex space-x-3\">\n              <Link \n                to=\"/login\" \n                className=\"px-4 py-2 bg-lemonade-blue text-white rounded-md hover:bg-lemonade-blue-dark transition\"\n              >\n                Log In\n              </Link>\n              <Link \n                to=\"/register\" \n                className=\"px-4 py-2 border border-lemonade-yellow bg-white text-lemonade-blue-dark rounded-md hover:bg-lemonade-yellow-light transition\"\n              >\n                Register\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <MapPage />\n    </div>\n  );\n};\n\nexport default HomePage;"],"file":"assets/js/HomePage-CrjvWcX1.js"}